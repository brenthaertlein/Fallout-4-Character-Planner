{"version":3,"sources":["StatsContext.ts","PerksContext.ts","StartingStats.tsx","Header.tsx","PerkStar.tsx","PerkElement.tsx","PerksGrid.tsx","PerksDetail.tsx","LevelControl.tsx","Bobbleheads.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["StatType","defaultSpecial","Object","keys","reduce","obj","key","StatsContext","React","createContext","SPECIAL","PerksContext","perks","Stat","name","value","Consumer","increment","decrement","pointsRemaining","getRank","hasBobblehead","ListGroupItem","style","userSelect","className","Button","size","padding","onClick","disabled","paddingLeft","paddingRight","minWidth","StartingStats","marginBottom","ListGroup","entries","map","Header","reset","useContext","useState","showShareModal","setShowShareModal","buttonStyle","fontSize","marginRight","Navbar","bg","Brand","src","height","width","alt","color","fontWeight","ButtonToolbar","variant","Modal","show","onHide","centered","Body","InputGroup","Form","Control","type","window","location","href","readOnly","Append","OverlayTrigger","trigger","delay","overlay","Tooltip","id","placement","ref","triggerHandler","Text","cursor","navigator","clipboard","writeText","xmlns","fill","viewBox","marginTop","marginLeft","d","PerkStar","filled","enabled","special","rank","level","add","remove","perkPointsRemaining","addable","setAddable","perk","useEffect","opacity","PerkElement","img","levels","getLevel","paddingTop","transition","Popover","Title","Content","description","display","justifyContent","Image","border","find","it","PerksGrid","Row","category","Col","substring","ranked","PerksDetail","ranks","target","push","values","length","LevelControl","setLevel","tooltip","min","max","onChange","changeEvent","parseInt","Bobbleheads","bobbleToggle","textAlign","maxHeight","maxWidth","AppStateListener","children","getBobbleHeads","state","bobbleheads","perksAdded","arr","existing","findIndex","splice","history","replaceState","document","title","LZUTF8","compress","JSON","stringify","outputEncoding","usePreserveState","AppContextProvider","parse","decompress","hash","inputEncoding","stats","initialLevel","savedBobbleheads","setSpecial","setBobbleheads","changeValue","stat","Math","pointsUsed","a","b","found","useStats","allPerks","flatMap","filter","added","setPerks","local","other","concat","higher","usePerks","Provider","useMemo","App","Container","fluid","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bd69f092.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport type SPECIAL = {\n    STRENGTH: number,\n    PERCEPTION: number,\n    ENDURANCE: number,\n    CHARISMA: number,\n    INTELLIGENCE: number,\n    AGILITY: number,\n    LUCK: number\n}\n\nexport type Stats = {\n    SPECIAL: SPECIAL,\n    increment: (stat: string) => void,\n    decrement: (stat: string) => void,\n    reset: () => void,\n    pointsRemaining: () => number,\n    getRank: (stat: string) => number,\n    getLevel: () => number,\n    setLevel: (level: number) => void,\n    getBobbleHeads: () => StatType[],\n    bobbleToggle: (stat: StatType) => void,\n    hasBobblehead: (stat: string) => boolean\n}\n\nexport enum StatType {\n    STRENGTH = \"STRENGTH\", PERCEPTION = \"PERCEPTION\", ENDURANCE = \"ENDURANCE\", CHARISMA = \"CHARISMA\", INTELLIGENCE = \"INTELLIGENCE\", AGILITY = \"AGILITY\", LUCK = \"LUCK\"\n}\n\nconst defaultSpecial = Object.keys(StatType).reduce((obj, key) => {\n    obj[key] = 1\n    return obj\n}, {} as any) as SPECIAL\n\nconst MAX_POINTS = 28\n\nexport const useStats = ({\n                             SPECIAL: special = defaultSpecial,\n                             level: initialLevel = 1,\n                             bobbleheads: savedBobbleheads = []\n                         }: { SPECIAL?: SPECIAL, level?: number, bobbleheads: [] }): Stats => {\n    const [SPECIAL, setSpecial] = useState<SPECIAL>(special)\n    const [level, setLevel] = useState(initialLevel)\n    const [bobbleheads, setBobbleheads] = useState<StatType[]>(savedBobbleheads)\n\n    const changeValue = (stat: string, value: number) => {\n        const target = getRank(stat);\n        setSpecial({\n            ...SPECIAL,\n            [stat]: Math.min(Math.max(target + value, 1), bobbleheads.findIndex(it => it === stat) >= 0 ? 11 : 10)\n        })\n    }\n\n    const increment = (stat: string) => {\n        changeValue(stat, 1)\n    }\n\n    const decrement = (stat: string) => changeValue(stat, -1)\n\n    const pointsRemaining = () => {\n        const pointsUsed = Object.values(SPECIAL).reduce((a, b) => a + Math.min(b, 11), 0) - bobbleheads.length\n        return Math.max(0, MAX_POINTS - pointsUsed)\n    }\n\n    const getRank = (stat: string): number => (SPECIAL as any)[stat]\n\n    const reset = () => {\n        setLevel(0)\n        setSpecial(defaultSpecial)\n        setBobbleheads([])\n    }\n\n    const bobbleToggle = (stat: StatType) => {\n        const found = bobbleheads.findIndex(it => it === stat)\n        if (found < 0) {\n            bobbleheads.push(stat)\n            increment(stat)\n        } else {\n            bobbleheads.splice(found, 1)\n            decrement(stat)\n        }\n        setBobbleheads([...bobbleheads])\n    }\n\n    return {\n        SPECIAL,\n        increment,\n        decrement,\n        reset,\n        pointsRemaining,\n        getRank,\n        getLevel: () => level,\n        setLevel: (level: number) => setLevel(Math.min(level, 50)),\n        getBobbleHeads: () => bobbleheads,\n        bobbleToggle,\n        hasBobblehead: (stat: string) => !!bobbleheads.find(it => it === stat)\n    } as Stats;\n}\n\nconst StatsContext = React.createContext<Stats>({SPECIAL: defaultSpecial} as Stats)\n\nexport default StatsContext\n","import React, {useEffect, useState} from \"react\";\n\nimport allPerks from \"./perks.json\"\n\nexport type Perk = {\n    special: string,\n    name: string,\n    rank: number,\n    level: number,\n    description?: string,\n    ranks?: number\n}\n\nexport type Perks = {\n    perks: Perk[],\n    add: (perk: Perk) => void,\n    remove: (perk: Perk) => void,\n    perkPointsRemaining: () => number\n}\n\nexport const usePerks = ({\n                             level,\n                             perksAdded = []\n                         }: { level: number, perksAdded?: Perk[] }): Perks => {\n    const [perks, setPerks] = useState<Array<Perk>>(\n        allPerks\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {special, name, level, rank, description, ranks: ranked.length}\n            })\n        })\n        .filter(it => perksAdded.find(added => it.name === added.name && it.rank <= added.rank))\n    )\n\n    const add = (perk: Perk) => {\n        const local = allPerks\n        .find(it => it.special === perk.special)\n        ?.perks\n        .find(it => it.name === perk.name)\n        const add = local\n        ?.ranked\n        .map(it => ({...it, name: local.name, ranks: local.ranks}))\n        .filter(it => it.rank <= perk.rank)\n        .map(it => ({...it, special: perk.special} as Perk)) as Perk[]\n        const other = perks.filter(it => it.name !== perk.name)\n        setPerks([...other].concat(add))\n    }\n\n    const remove = (perk: Perk) => {\n        const existing = perks.filter(it => it.name === perk.name)\n        const other = perks.filter(it => it.name !== perk.name)\n        const higher = existing.find(it => it.rank > perk.rank)\n        const add = existing.filter(it => higher ? it.rank <= perk.rank : it.rank < perk.rank)\n        setPerks([...other, ...add])\n    }\n\n    useEffect(() => {\n        setPerks(perks => perks.filter(it => it.level < level))\n    }, [level])\n\n    return {\n        perks,\n        add,\n        remove,\n        perkPointsRemaining: () => {\n            return level - 1 - perks.length\n        }\n    } as Perks\n}\n\nconst PerksContext = React.createContext<Perks>({perks: [] as Perk[]} as Perks)\n\nexport default PerksContext\n","import StatsContext, {Stats} from \"./StatsContext\"\nimport {Button, ListGroup, ListGroupItem} from \"react-bootstrap\"\n\nconst StartingStats = () => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({SPECIAL, pointsRemaining}: Stats) => {\n                    return (\n                        <>\n                            <div style={{padding: 2, marginBottom: 10}}>\n                                <h3>S.P.E.C.I.A.L</h3>\n                                <span>{pointsRemaining()} points left to spend</span>\n                            </div>\n                            <ListGroup>\n                                {\n                                    Object.entries(SPECIAL)\n                                    .map(\n                                        ([name, value]) => <Stat key={name} name={name}\n                                                                 value={value}/>\n                                    )\n                                }\n                            </ListGroup>\n                        </>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype StatProps = {\n    name: string,\n    value: number\n}\n\nconst Stat = ({name, value}: StatProps) =>\n    <StatsContext.Consumer>\n        {({increment, decrement, pointsRemaining, getRank, hasBobblehead}: Stats) =>\n            <ListGroupItem>\n                <span style={{userSelect: \"none\"}}>\n                    {name}:\n                </span>\n                <span className={\"float-end\"}>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => decrement(name)}\n                                    disabled={value <= (hasBobblehead(name) ? 2 : 1)}\n                            >\n                                -\n                            </Button>\n                            <span\n                                style={{\n                                    paddingLeft: 10,\n                                    paddingRight: 10,\n                                    minWidth: 40,\n                                    userSelect: \"none\"\n                                }}\n                            >\n                                {value}\n                            </span>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => increment(name)}\n                                    disabled={getRank(name) >= (hasBobblehead(name) ? 11 : 10) || pointsRemaining() <= 0}\n                            >\n                                +\n                            </Button>\n                        </span>\n            </ListGroupItem>\n        }\n    </StatsContext.Consumer>\n\nexport default StartingStats\n","import {\n    Button,\n    ButtonToolbar,\n    Form,\n    InputGroup,\n    Modal,\n    Navbar,\n    OverlayTrigger,\n    Tooltip\n} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport {useContext, useState} from \"react\";\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\";\n\nconst Header = () => {\n    const {reset} = useContext(StatsContext)\n    const [showShareModal, setShowShareModal] = useState(false)\n\n    const share = () => setShowShareModal(!showShareModal)\n\n    const buttonStyle = {fontSize: 14, marginRight: 10}\n\n    return (\n        <Navbar bg={\"light\"} style={{marginBottom: 20}}>\n            <Navbar.Brand>\n                <img src={\"img/brand.jpg\"} style={{height: 30, width: 30}} alt={\"Brand\"}/>\n                <span style={{paddingLeft: 10, fontSize: 18, color: \"#777\", fontWeight: 500}}>\n                    Fallout 4 Character Planner\n                </span>\n            </Navbar.Brand>\n            <ButtonToolbar>\n                <Button style={buttonStyle} variant={\"danger\"} onClick={() => reset()}>\n                    Reset\n                </Button>\n                <Button style={buttonStyle} onClick={() => share()}>\n                    Share\n                </Button>\n            </ButtonToolbar>\n            <Modal show={showShareModal} onHide={() => setShowShareModal(false)} centered>\n                <Modal.Header>Share your build with friends!</Modal.Header>\n                <Modal.Body>\n                    <InputGroup>\n                        <Form.Control type={\"text\"} value={window.location.href} readOnly={true}/>\n                        <InputGroup.Append>\n                            <OverlayTrigger\n                                trigger={\"click\"}\n                                delay={50}\n                                overlay={\n                                    <Tooltip id={\"copiedToClipboard\"}>\n                                        Copied to clipboard!\n                                    </Tooltip>\n                                }\n                                placement={\"top\"}\n                            >\n                                {\n                                    ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                                        <InputGroup.Text\n                                            style={{\n                                                cursor: \"pointer\"\n                                            }}\n                                            onClick={() => navigator.clipboard.writeText(window.location.href)}\n                                            {...triggerHandler}\n                                            ref={ref}\n                                        >\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                width=\"24\"\n                                                height=\"24\"\n                                                fill=\"currentColor\"\n                                                className=\"bi bi-clipboard\"\n                                                viewBox=\"0 0 24 24\"\n                                                style={{\n                                                    marginTop: 4,\n                                                    marginLeft: 4\n                                                }}\n                                            >\n                                                <path\n                                                    d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\"/>\n                                                <path\n                                                    d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\"/>\n                                            </svg>\n                                        </InputGroup.Text>\n                                }\n                            </OverlayTrigger>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Modal.Body>\n            </Modal>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import PerksContext from \"./PerksContext\"\nimport {useContext, useEffect, useState} from \"react\";\n\ntype PerkStarProps = {\n    filled?: boolean,\n    enabled: boolean,\n    special: string,\n    name: string,\n    rank: number,\n    level: number\n}\n\nconst PerkStar = ({filled = false, enabled, special, name, rank, level}: PerkStarProps) => {\n    const {add, remove, perkPointsRemaining} = useContext(PerksContext)\n\n    const [addable, setAddable] = useState(false)\n\n    const perk = {special, name, rank, level}\n\n    useEffect(() => {\n        setAddable(enabled && perkPointsRemaining() >= rank)\n    }, [enabled, perkPointsRemaining, rank])\n\n    return (\n        filled ?\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                fill=\"yellow\"\n                className=\"bi bi-star-fill\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => remove(perk)}\n                style={{\n                    cursor: \"pointer\"\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\"/>\n            </svg>\n            :\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                fill={\"currentColor\"}\n                className=\"bi bi-star\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => addable && add(perk)}\n                style={{\n                    opacity: addable ? 1 : 0.3,\n                    cursor: addable ? \"pointer\" : \"cursor\"\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n                />\n            </svg>\n    )\n}\n\nexport default PerkStar\n","import {Image, OverlayTrigger, Popover} from \"react-bootstrap\"\nimport StatsContext, {Stats} from \"./StatsContext\"\nimport PerksContext, {Perks} from \"./PerksContext\"\nimport PerkStar from \"./PerkStar\"\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\"\n\ntype PerkProps = {\n    special: string,\n    img: string,\n    name: string,\n    rank: number,\n    levels: any[]\n}\n\nconst PerkElement = ({special, img, name, rank, levels}: PerkProps) =>\n    <StatsContext.Consumer>\n        {({getRank, getLevel}: Stats) =>\n            <PerksContext.Consumer>\n                {({perks}: Perks) =>\n                    <div style={{paddingTop: 10}}>\n                        <OverlayTrigger\n                            trigger={[\"hover\", \"focus\"]}\n                            placement={\"auto\"}\n                            transition={false}\n                            overlay={\n                                <Popover id={name}>\n                                    <Popover.Title>{name}</Popover.Title>\n                                    <Popover.Content>\n                                        {\n                                            levels.map(level => {\n                                                return (\n                                                    <p key={`${level.name} ${level.rank}`}>\n                                                        Rank {level.rank}\n                                                        {\n                                                            level.level > getLevel() &&\n                                                            <span style={{\n                                                                fontSize: 12,\n                                                                fontWeight: 700,\n                                                                paddingLeft: 4\n                                                            }}>\n                                                              (Requires Level {level.level})\n                                                            </span>\n                                                        }: {level.description}\n                                                    </p>\n                                                )\n                                            })\n                                        }\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            {\n                                ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                                    <div\n                                        ref={ref}\n                                        style={{\n                                            opacity: getRank(special) >= rank ? 1 : 0.3,\n                                            display: \"inline-block\",\n                                            justifyContent: \"center\"\n                                        }}>\n                                        <div {...triggerHandler}>\n                                            <Image\n                                                src={`img/${img}`}\n                                                alt={name}\n                                                style={{\n                                                    border: \"0px solid #777\"\n                                                }}\n                                            />\n                                        </div>\n                                        <div style={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\"\n                                        }}>\n                                            {\n                                                levels.map(level => <PerkStar\n                                                    key={`${name}-${level.rank}`}\n                                                    filled={!!perks.find(it => it.name === name && it.rank >= level.rank)}\n                                                    enabled={getRank(special) >= rank && getLevel() >= level.level}\n                                                    special={special}\n                                                    name={name}\n                                                    rank={level.rank}\n                                                    level={level.level}\n                                                />)\n                                            }\n                                        </div>\n                                    </div>\n                            }\n                        </OverlayTrigger>\n                    </div>\n                }\n            </PerksContext.Consumer>\n        }\n    </StatsContext.Consumer>\n\nexport default PerkElement\n","import perks from \"./perks.json\"\nimport {Col, Row} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\n\nconst PerksGrid = () => {\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) => {\n                    return (\n                        <Row style={{padding: 12}}>\n                            {\n                                perks.map(\n                                    category => {\n                                        return (\n                                            <Col key={category.special} style={{padding: \"0px 8px\"}}>\n                                                <Row style={{fontWeight: 600}}>\n                                                    {category.special.substring(0, 2)}: {getRank(category.special)}\n                                                </Row>\n                                                {\n                                                    category.perks.map(\n                                                        perk => {\n                                                            return (\n                                                                <PerkElement\n                                                                    key={perk.name}\n                                                                    special={category.special}\n                                                                    img={perk.img}\n                                                                    name={perk.name}\n                                                                    rank={perk.rank}\n                                                                    levels={perk.ranked}\n                                                                />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Col>\n                                        )\n                                    }\n                                )\n                            }\n                        </Row>\n                    )\n                }}\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksGrid\n","import PerksContext, {Perks} from \"./PerksContext\"\n\nconst PerksDetail = () => {\n    return (\n        <PerksContext.Consumer>\n            {\n                ({perks}: Perks) => {\n                    const map = perks\n                    .reduce((obj, it) => {\n                        const {name, ranks, rank, level, description} = it\n                        const target = obj[it.name] || {name, ranks, ranked: []}\n                        target.ranked.push({rank, level, description})\n                        obj[it.name] = target\n                        return obj\n                    }, {} as any)\n                    return Object.values(map).map(({name, ranked, ranks}: any) =>\n                        <span key={name}>\n                            <p>{name}: {ranked.length} / {ranks}</p>\n                            {\n                                ranked.map((rank: any) =>\n                                    <p\n                                        key={rank.level}\n                                        style={{\n                                            paddingLeft: 20,\n                                            fontSize: 12\n                                        }}\n                                    >\n                                        {rank.description}\n                                    </p>\n                                )\n                            }\n                        </span>\n                    )\n                }\n            }\n        </PerksContext.Consumer>\n    )\n}\n\nexport default PerksDetail\n","import RangeSlider from \"react-bootstrap-range-slider\";\nimport {useContext} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\n\nconst LevelControl = () => {\n    const {getLevel, pointsRemaining, setLevel} = useContext(StatsContext)\n    const {perkPointsRemaining} = useContext(PerksContext)\n    return (\n        <div style={{paddingTop: 10}}>\n            Level: {getLevel()}\n            <div\n                style={{width: \"100%\"}}\n            >\n                <RangeSlider\n                    disabled={pointsRemaining() > 0}\n                    size={\"lg\"}\n                    value={getLevel()}\n                    tooltip={\"off\"}\n                    min={1}\n                    max={50}\n                    onChange={changeEvent => {\n                        const level = parseInt(changeEvent.target.value)\n                        setLevel(level)\n                    }}\n                />\n                {\n                    getLevel() > 1 &&\n                    perkPointsRemaining() >= 0\n                        ?\n                        <p>\n                            Remaining perk\n                            points: {perkPointsRemaining()}\n                        </p>\n                        :\n                        <p>Requires level: {getLevel() - perkPointsRemaining()}</p>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default LevelControl\n","import {Image} from \"react-bootstrap\";\nimport StatsContext, {StatType} from \"./StatsContext\";\n\nconst Bobbleheads = () =>\n    <StatsContext.Consumer>\n        {({bobbleToggle, hasBobblehead}) =>\n            <div style={{\n                display: \"inline-flex\",\n                justifyContent: \"space-evenly\",\n                width: \"100%\",\n                textAlign: \"center\",\n                paddingTop: 10\n            }}>\n                {Object.keys(StatType).map(name => name as StatType).map(name =>\n                    <span\n                        key={name}\n                        style={{\n                            padding: 10,\n                            opacity: hasBobblehead(name) ? 1 : 0.5,\n                            cursor: \"pointer\"\n                        }}\n                        onClick={() => bobbleToggle(name)}\n                    >\n                            <Image\n                                style={{\n                                    maxHeight: 40,\n                                    maxWidth: 30,\n                                    userSelect: \"none\"\n                                }}\n                                src={\"img/bobblehead.png\"}\n                            />\n                            <p style={{userSelect: \"none\"}}>{name.substring(0, 2)}</p>\n                    </span>\n                )}\n            </div>\n        }\n    </StatsContext.Consumer>\n\nexport default Bobbleheads\n","import \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport {PropsWithChildren, useContext, useEffect, useMemo} from \"react\"\nimport {Col, Container, Row} from \"react-bootstrap\"\n\nimport LZUTF8 from \"lzutf8\";\n\nimport StatsContext, {useStats} from \"./StatsContext\"\nimport PerksContext, {Perk, usePerks} from \"./PerksContext\"\nimport StartingStats from \"./StartingStats\"\nimport Header from \"./Header\"\nimport PerksGrid from \"./PerksGrid\"\nimport PerksDetail from \"./PerksDetail\"\nimport LevelControl from \"./LevelControl\";\nimport Bobbleheads from \"./Bobbleheads\";\n\nconst usePreserveState = () => {\n    const {SPECIAL, getLevel, getBobbleHeads} = useContext(StatsContext)\n    const {perks} = useContext(PerksContext)\n    useEffect(() => {\n        const state = {\n            SPECIAL: SPECIAL,\n            level: getLevel(),\n            bobbleheads: getBobbleHeads(),\n            perksAdded: perks.map(it => {\n                const {name, rank} = it\n                return {name, rank} as Perk\n            })\n            .reduce((arr, perk) => {\n                const existing = arr.findIndex(it => it.name === perk.name)\n                if (existing >= 0) arr.splice(existing, 1)\n                arr.push(perk)\n                return arr\n            }, [] as Perk[])\n        }\n        window.history.replaceState(null, document.title, `#${LZUTF8.compress(JSON.stringify(state), {outputEncoding: \"Base64\"})}`)\n    }, [SPECIAL, perks, getLevel, getBobbleHeads])\n}\n\nconst AppStateListener = ({children}: PropsWithChildren<any>) => {\n    usePreserveState()\n    return (<>{children}</>)\n}\n\nconst AppContextProvider = ({children}: PropsWithChildren<any>) => {\n    const {\n        SPECIAL,\n        level,\n        perksAdded,\n        bobbleheads\n    } = JSON.parse(LZUTF8.decompress(window.location.hash.substring(1, window.location.hash.length), {inputEncoding: \"Base64\"}) || \"{}\")\n    const stats = useStats({SPECIAL, level, bobbleheads})\n    const perks = usePerks({level: stats.getLevel(), perksAdded})\n    return (\n        <StatsContext.Provider value={stats}>\n            <PerksContext.Provider value={useMemo(() => perks, [perks])}>\n                <AppStateListener>\n                    {children}\n                </AppStateListener>\n            </PerksContext.Provider>\n        </StatsContext.Provider>\n    )\n}\n\nconst App = () => {\n    return (\n        <AppContextProvider>\n            <Container fluid>\n                <Header/>\n                <Row>\n                    <Col xl={3}>\n                        <StartingStats/>\n                        <Bobbleheads/>\n                        <LevelControl/>\n                        <PerksDetail/>\n                    </Col>\n                    <Col xl={9}>\n                        <PerksGrid/>\n                    </Col>\n                </Row>\n            </Container>\n        </AppContextProvider>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}