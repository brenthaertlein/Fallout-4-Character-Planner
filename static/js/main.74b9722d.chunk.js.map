{"version":3,"sources":["StatsContext.ts","BuildContext.ts","MatchMedia.ts","PerksContext.ts","StartingStats.tsx","RenameModal.tsx","Modal.ts","ShareModal.tsx","Buttons.tsx","Randomizer.ts","Header.tsx","PerkStar.tsx","PerkElement.tsx","PerksGrid.tsx","PerksDetail.tsx","LevelControl.tsx","Bobbleheads.tsx","PerksTower.tsx","BuildInfo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["StatType","BuildContext","React","createContext","Breakpoints","defaultSpecial","Object","keys","reduce","obj","key","StatsContext","SPECIAL","PerksContext","perks","Stat","name","value","Consumer","increment","decrement","pointsRemaining","getRank","hasBobblehead","ListGroupItem","style","userSelect","className","Button","size","padding","onClick","disabled","paddingLeft","paddingRight","minWidth","StartingStats","marginBottom","ListGroup","entries","map","RenameModal","show","setShow","useContext","buildName","setBuildName","setName","useState","Modal","onHide","centered","Header","Body","InputGroup","Form","Control","type","onChange","e","target","Footer","undefined","useModal","ShareModal","window","location","href","readOnly","Append","OverlayTrigger","trigger","delay","overlay","Tooltip","id","placement","ref","triggerHandler","Text","cursor","navigator","clipboard","writeText","xmlns","width","height","fill","viewBox","marginTop","marginLeft","d","Buttons","resetStats","reset","resetPerks","showShareModal","setShowShareModal","showRenameModal","setShowRenameModal","getLevel","setLevel","perkPointsRemaining","addPerk","add","availablePerks","getPerkRank","randomizing","setRandomizing","failedAddPerkCount","setFailedAddPerkCount","useEffect","stats","stat","Math","floor","random","length","available","filter","it","requiredSpecial","special","perk","rank","count","failed","outOfPoints","randomize","useRandomizer","buttonStyle","fontSize","marginRight","ButtonToolbar","variant","maxWidth","mediaSizes","xs","sm","md","lg","xl","useMatchMedia","mediaSize","setMediaSize","mediaQueryList","matchMedia","forEach","addEventListener","matches","gt","breakpoint","eq","lt","Navbar","bg","Brand","src","process","alt","color","fontWeight","PerkStar","filled","enabled","level","remove","setSize","addable","setAddable","opacity","PerkElement","img","levels","paddingTop","display","justifyContent","transition","Popover","Title","Content","description","Image","border","textAlign","find","PerksGrid","Row","category","Col","substring","ranked","PerksDetail","values","ranks","push","LevelControl","tooltip","min","max","changeEvent","parseInt","Bobbleheads","bobbleToggle","maxHeight","PerksTower","setCategory","ToggleButtonGroup","SpecialPerks","ToggleButton","BuildInfo","AppStateListener","children","getBobbleHeads","state","bobbleheads","perksAdded","arr","existing","findIndex","splice","history","replaceState","document","title","LZUTF8","compress","JSON","stringify","outputEncoding","usePreserveState","AppContextProvider","parse","decompress","hash","inputEncoding","initialLevel","savedBobbleheads","setSpecial","setBobbleheads","changeValue","pointsUsed","a","b","found","useStats","allPerks","flatMap","added","setPerks","local","other","concat","higher","usePerks","build","useBuild","Provider","useMemo","App","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.74b9722d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport type SPECIAL = {\n    STRENGTH: number,\n    PERCEPTION: number,\n    ENDURANCE: number,\n    CHARISMA: number,\n    INTELLIGENCE: number,\n    AGILITY: number,\n    LUCK: number\n}\n\nexport type Stats = {\n    SPECIAL: SPECIAL,\n    increment: (stat: string) => void,\n    decrement: (stat: string) => void,\n    reset: () => void,\n    pointsRemaining: () => number,\n    getRank: (stat: string) => number,\n    getLevel: () => number,\n    setLevel: (level: number) => void,\n    getBobbleHeads: () => StatType[],\n    bobbleToggle: (stat: StatType) => void,\n    hasBobblehead: (stat: string) => boolean\n}\n\nexport enum StatType {\n    STRENGTH = \"STRENGTH\", PERCEPTION = \"PERCEPTION\", ENDURANCE = \"ENDURANCE\", CHARISMA = \"CHARISMA\", INTELLIGENCE = \"INTELLIGENCE\", AGILITY = \"AGILITY\", LUCK = \"LUCK\"\n}\n\nconst defaultSpecial = Object.keys(StatType).reduce((obj, key) => {\n    obj[key] = 1\n    return obj\n}, {} as any) as SPECIAL\n\nconst MAX_POINTS = 28\n\nexport const useStats = ({\n                             SPECIAL: special = defaultSpecial,\n                             level: initialLevel = 1,\n                             bobbleheads: savedBobbleheads = []\n                         }: { SPECIAL?: SPECIAL, level?: number, bobbleheads: [] }): Stats => {\n    const [SPECIAL, setSpecial] = useState<SPECIAL>(special)\n    const [level, setLevel] = useState(initialLevel)\n    const [bobbleheads, setBobbleheads] = useState<StatType[]>(savedBobbleheads)\n\n    const changeValue = (stat: string, value: number) => {\n        const target = getRank(stat);\n        setSpecial({\n            ...SPECIAL,\n            [stat]: Math.min(Math.max(target + value, 1), bobbleheads.findIndex(it => it === stat) >= 0 ? 11 : 10)\n        })\n    }\n\n    const increment = (stat: string) => {\n        changeValue(stat, 1)\n    }\n\n    const decrement = (stat: string) => changeValue(stat, -1)\n\n    const pointsRemaining = () => {\n        const pointsUsed = Object.values(SPECIAL).reduce((a, b) => a + Math.min(b, 11), 0) - bobbleheads.length\n        return Math.max(0, MAX_POINTS - pointsUsed)\n    }\n\n    const getRank = (stat: string): number => (SPECIAL as any)[stat]\n\n    const reset = () => {\n        setLevel(1)\n        setSpecial(defaultSpecial)\n        setBobbleheads([])\n    }\n\n    const bobbleToggle = (stat: StatType) => {\n        const found = bobbleheads.findIndex(it => it === stat)\n        if (found < 0) {\n            bobbleheads.push(stat)\n            increment(stat)\n        } else {\n            bobbleheads.splice(found, 1)\n            decrement(stat)\n        }\n        setBobbleheads([...bobbleheads])\n    }\n\n    return {\n        SPECIAL,\n        increment,\n        decrement,\n        reset,\n        pointsRemaining,\n        getRank,\n        getLevel: () => level,\n        setLevel: (level: number) => setLevel(Math.min(level, 50)),\n        getBobbleHeads: () => bobbleheads,\n        bobbleToggle,\n        hasBobblehead: (stat: string) => !!bobbleheads.find(it => it === stat),\n    } as Stats;\n}\n\nconst StatsContext = React.createContext<Stats>({SPECIAL: defaultSpecial} as Stats)\n\nexport default StatsContext\n","import React, {useState} from \"react\";\n\ntype UseBuild = {\n    name?: string\n}\n\nexport const useBuild = ({name: buildName}: UseBuild) => {\n    const [name, setName] = useState(buildName)\n\n    return {\n        name,\n        setName\n    } as Build\n}\n\ntype Build = {\n    name?: string,\n    setName: (value?: string) => void\n}\n\nconst BuildContext = React.createContext({} as Build)\n\nexport default BuildContext\n","import {useEffect, useState} from \"react\";\n\nconst maxWidth = (width: number) => `(max-width: ${width - .02}px)`\n\nconst minWidth = (width: number) => `(min-width: ${width}px)`\n\nexport enum Breakpoints {\n    xs,\n    sm,\n    md,\n    lg,\n    xl\n}\n\n// const breakpoints = [576, 768, 992, 1200]\n\nconst mediaSizes = {\n    xs: maxWidth(576),\n    sm: `${minWidth(576)} and ${maxWidth(768)}`,\n    md: `${minWidth(768)} and ${maxWidth(992)}`,\n    lg: `${minWidth(992)} and ${maxWidth(1200)}`,\n    xl: minWidth(1200)\n}\n\nexport const useMatchMedia = () => {\n\n    const [mediaSize, setMediaSize] = useState<string>()\n\n    const gt = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] > (Breakpoints as any)[breakpoint] : true\n    }\n\n    const eq = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] === (Breakpoints as any)[breakpoint] : true\n    }\n\n    const lt = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] < (Breakpoints as any)[breakpoint] : true\n    }\n\n    useEffect(() => {\n        Object\n        .entries(mediaSizes)\n        .map(([key, value]) => ({key, mediaQueryList: window.matchMedia(value)}))\n        .forEach(({key, mediaQueryList}) => {\n            mediaQueryList.addEventListener(\"change\", it => {\n                if (it.matches) {\n                    setMediaSize(key)\n                }\n            })\n            if (mediaQueryList.matches) {\n                setMediaSize(key)\n            }\n        })\n    }, [])\n\n    return {\n        mediaSize,\n        gt,\n        eq,\n        lt\n    }\n}\n","import React, {useEffect, useState} from \"react\";\n\nimport allPerks from \"./perks.json\"\n\nexport type Perk = {\n    special: string,\n    name: string,\n    rank: number,\n    level: number,\n    requiredSpecial?: number,\n    description?: string,\n    ranks?: number\n}\n\nexport type Perks = {\n    perks: Perk[],\n    add: (perk: Perk) => void,\n    remove: (perk: Perk) => void,\n    perkPointsRemaining: () => number,\n    availablePerks: () => Perk[],\n    reset: () => void,\n    getPerkRank: (name: String) => number\n}\n\ntype UsePerks = { level: number, perksAdded?: Perk[] }\n\nexport const usePerks = ({level, perksAdded = []}: UsePerks): Perks => {\n    const [perks, setPerks] = useState<Array<Perk>>(\n        allPerks\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, rank: requiredSpecial, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {\n                    special,\n                    name,\n                    level,\n                    rank,\n                    description,\n                    requiredSpecial,\n                    ranks: ranked.length\n                }\n            })\n        })\n        .filter(it => perksAdded.find(added => it.name === added.name && it.rank <= added.rank))\n    )\n\n    const add = (perk: Perk) => {\n        const local = allPerks\n        .find(it => it.special === perk.special)\n        ?.perks\n        .find(it => it.name === perk.name)\n        const add = local\n        ?.ranked\n        .map(it => ({...it, name: local.name, ranks: local.ranks}))\n        .filter(it => it.rank <= perk.rank)\n        .map(it => ({...it, special: perk.special} as Perk)) as Perk[]\n        const other = perks.filter(it => it.name !== perk.name)\n        setPerks([...other].concat(add))\n    }\n\n    const remove = (perk: Perk) => {\n        const existing = perks.filter(it => it.name === perk.name)\n        const other = perks.filter(it => it.name !== perk.name)\n        const higher = existing.find(it => it.rank > perk.rank)\n        const add = existing.filter(it => higher ? it.rank <= perk.rank : it.rank < perk.rank)\n        setPerks([...other, ...add])\n    }\n\n    const perkPointsRemaining = () => level - 1 - perks.length\n\n    const availablePerks = () =>\n        allPerks\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, rank: requiredSpecial, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {\n                    special,\n                    name,\n                    level,\n                    rank,\n                    requiredSpecial,\n                    description,\n                    ranks: ranked.length\n                }\n            })\n        })\n        .filter(it => !perks.find(perk => it.name === perk.name && it.rank <= perk.rank))\n\n    const getPerkRank = (name: String) => perks.filter(it => it.name === name)?.length ?? 0\n\n    const reset = () => {\n        setPerks([])\n    }\n\n    useEffect(() => {\n        setPerks(perks => perks.filter(it => it.level < level))\n    }, [level])\n\n    return {\n        perks,\n        add,\n        remove,\n        perkPointsRemaining,\n        availablePerks,\n        getPerkRank,\n        reset\n    } as Perks\n}\n\nconst PerksContext = React.createContext<Perks>({perks: [] as Perk[]} as Perks)\n\nexport default PerksContext\n","import StatsContext, {Stats} from \"./StatsContext\"\nimport {Button, ListGroup, ListGroupItem} from \"react-bootstrap\"\n\nconst StartingStats = () => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({SPECIAL, pointsRemaining}: Stats) => {\n                    return (\n                        <>\n                            <div style={{padding: 2, marginBottom: 10}}>\n                                <h3>S.P.E.C.I.A.L</h3>\n                                <span>{pointsRemaining()} points left to spend</span>\n                            </div>\n                            <ListGroup>\n                                {\n                                    Object.entries(SPECIAL)\n                                    .map(\n                                        ([name, value]) => <Stat key={name} name={name}\n                                                                 value={value}/>\n                                    )\n                                }\n                            </ListGroup>\n                        </>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype StatProps = {\n    name: string,\n    value: number\n}\n\nconst Stat = ({name, value}: StatProps) =>\n    <StatsContext.Consumer>\n        {({increment, decrement, pointsRemaining, getRank, hasBobblehead}: Stats) =>\n            <ListGroupItem>\n                <span style={{userSelect: \"none\"}}>\n                    {name}:\n                </span>\n                <span className={\"float-end\"}>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => decrement(name)}\n                                    disabled={value <= (hasBobblehead(name) ? 2 : 1)}\n                            >\n                                -\n                            </Button>\n                            <span\n                                style={{\n                                    paddingLeft: 10,\n                                    paddingRight: 10,\n                                    minWidth: 40,\n                                    userSelect: \"none\"\n                                }}\n                            >\n                                {value}\n                            </span>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => increment(name)}\n                                    disabled={getRank(name) >= (hasBobblehead(name) ? 11 : 10) || pointsRemaining() <= 0}\n                            >\n                                +\n                            </Button>\n                        </span>\n            </ListGroupItem>\n        }\n    </StatsContext.Consumer>\n\nexport default StartingStats\n","import {useContext, useState} from \"react\";\nimport BuildContext from \"./BuildContext\";\nimport {Button, Form, InputGroup, Modal} from \"react-bootstrap\";\nimport {UseModal} from \"./Modal\";\n\nconst RenameModal = ({show, setShow}: UseModal) => {\n    const {name: buildName, setName: setBuildName} = useContext(BuildContext)\n    const [name, setName] = useState(buildName || \"\")\n    return (\n        <Modal show={show} onHide={() => setShow(false)} centered>\n            <Modal.Header>Name your build!</Modal.Header>\n            <Modal.Body>\n                <InputGroup>\n                    <Form.Control\n                        type={\"text\"}\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                    />\n                </InputGroup>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    className={\"float-end\"}\n                    onClick={() => {\n                        setBuildName(name || undefined)\n                        setShow(false)\n                    }}\n                >\n                    Save\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default RenameModal\n","import {useState} from \"react\";\n\nexport type UseModal = {\n    show: boolean,\n    setShow: (value: boolean) => void\n}\n\nexport const useModal = () => {\n    const [show, setShow] = useState(false)\n\n    return {\n        show,\n        setShow\n    } as UseModal\n}\n","import {Form, InputGroup, Modal, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\";\nimport {UseModal} from \"./Modal\";\n\nconst ShareModal = ({show, setShow}: UseModal) => {\n    return (\n        <Modal show={show} onHide={() => setShow(false)} centered>\n            <Modal.Header>Share your build with friends!</Modal.Header>\n            <Modal.Body>\n                <InputGroup>\n                    <Form.Control type={\"text\"} value={window.location.href} readOnly={true}/>\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            trigger={\"click\"}\n                            delay={50}\n                            overlay={\n                                <Tooltip id={\"copiedToClipboard\"}>\n                                    Copied to clipboard!\n                                </Tooltip>\n                            }\n                            placement={\"top\"}\n                        >\n                            {\n                                ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                                    <InputGroup.Text\n                                        style={{\n                                            cursor: \"pointer\"\n                                        }}\n                                        onClick={() => navigator.clipboard.writeText(window.location.href)}\n                                        {...triggerHandler}\n                                        ref={ref}\n                                    >\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            width=\"24\"\n                                            height=\"24\"\n                                            fill=\"currentColor\"\n                                            className=\"bi bi-clipboard\"\n                                            viewBox=\"0 0 24 24\"\n                                            style={{\n                                                marginTop: 4,\n                                                marginLeft: 4\n                                            }}\n                                        >\n                                            <path\n                                                d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\"/>\n                                            <path\n                                                d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\"/>\n                                        </svg>\n                                    </InputGroup.Text>\n                            }\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ShareModal\n","import {Button, ButtonToolbar} from \"react-bootstrap\";\nimport {useContext} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\nimport {useRandomizer} from \"./Randomizer\";\nimport BuildContext from \"./BuildContext\";\nimport RenameModal from \"./RenameModal\";\nimport {useModal} from \"./Modal\";\nimport ShareModal from \"./ShareModal\";\n\nconst Buttons = () => {\n    const {setName: setBuildName} = useContext(BuildContext)\n    const {reset: resetStats} = useContext(StatsContext)\n    const {reset: resetPerks} = useContext(PerksContext)\n    const {show: showShareModal, setShow: setShowShareModal} = useModal()\n    const {show: showRenameModal, setShow: setShowRenameModal} = useModal()\n\n    const {randomize, randomizing} = useRandomizer()\n\n    const share = () => setShowShareModal(!showShareModal)\n\n    const save = () => setShowRenameModal(!showRenameModal)\n\n    const reset = () => {\n        resetStats();\n        resetPerks();\n        setBuildName(undefined)\n    }\n\n    const buttonStyle = {fontSize: 14, marginRight: 10}\n\n    return (\n        <>\n            <ButtonToolbar>\n                <Button style={buttonStyle} variant={\"primary\"} onClick={() => save()}>\n                    Save\n                </Button>\n                <Button style={buttonStyle} variant={\"outline-danger\"} onClick={() => reset()}\n                        disabled={randomizing}>\n                    Reset\n                </Button>\n                <Button style={buttonStyle} variant={\"outline-primary\"} onClick={() => share()} disabled={randomizing}>\n                    Share\n                </Button>\n            </ButtonToolbar>\n            <ButtonToolbar style={{paddingLeft: 20}}>\n                <Button style={buttonStyle} variant={\"outline-success\"} onClick={() => randomize()}\n                        disabled={randomizing}>\n                    Randomize\n                </Button>\n            </ButtonToolbar>\n            <ShareModal show={showShareModal} setShow={setShowShareModal}/>\n            <RenameModal show={showRenameModal} setShow={setShowRenameModal}/>\n        </>\n    )\n\n}\n\nexport default Buttons\n","import {useContext, useEffect, useState} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\n\nconst MAX_FAILURES = 100\n\nexport const useRandomizer = () => {\n    const {\n        getLevel,\n        setLevel,\n        pointsRemaining,\n        increment,\n        SPECIAL,\n        reset: resetStats\n    } = useContext(StatsContext)\n    const {\n        perkPointsRemaining,\n        add: addPerk,\n        availablePerks,\n        getPerkRank,\n        reset: resetPerks\n    } = useContext(PerksContext)\n\n    const [randomizing, setRandomizing] = useState(false)\n    const [failedAddPerkCount, setFailedAddPerkCount] = useState(0)\n\n    const randomize = () => {\n        resetStats()\n        resetPerks()\n        setRandomizing(true)\n    }\n\n    useEffect(() => {\n        if (randomizing) {\n            setLevel(50)\n            if (pointsRemaining() > 0) {\n                const stats = Object.keys(SPECIAL)\n                const stat = stats[Math.floor(Math.random() * stats.length)]\n                increment(stat)\n            }\n            if (perkPointsRemaining() > 0) {\n                const available = availablePerks()\n                    .filter(it => (it.requiredSpecial || 999) <= (SPECIAL as any)[it.special])\n                const perk = available[Math.floor(Math.random() * available.length)]\n                if (perkPointsRemaining() >= (perk.rank - getPerkRank(perk.name))) {\n                    addPerk(perk)\n                } else {\n                    setFailedAddPerkCount(count => count + 1)\n                }\n            }\n            const failed = failedAddPerkCount >= MAX_FAILURES\n            const outOfPoints = pointsRemaining() <= 0 && perkPointsRemaining() <= 0\n            if (failed || outOfPoints) {\n                setRandomizing(false)\n            }\n        }\n    }, [\n        randomizing, SPECIAL, addPerk, availablePerks, getPerkRank, increment, perkPointsRemaining,\n        pointsRemaining, getLevel, setLevel, failedAddPerkCount\n    ])\n\n    return {randomize, randomizing}\n}\n","import {Navbar} from \"react-bootstrap\"\nimport Buttons from \"./Buttons\";\nimport {useMatchMedia} from \"./MatchMedia\";\n\nconst Header = () => {\n    const {gt} = useMatchMedia()\n\n    return (\n        <Navbar bg={\"light\"} style={{marginBottom: 20}}>\n            <Navbar.Brand>\n                <img src={`${process.env.PUBLIC_URL}/img/brand.jpg`} style={{height: 30, width: 30}}\n                     alt={\"Brand\"}/>\n                <span style={{paddingLeft: 10, fontSize: 18, color: \"#777\", fontWeight: 500}}>\n                    Fallout 4 Character Planner\n                </span>\n            </Navbar.Brand>\n            {\n                gt(\"xs\") &&\n                <Buttons/>\n            }\n        </Navbar>\n    )\n}\n\nexport default Header\n","import PerksContext from \"./PerksContext\"\nimport {useContext, useEffect, useState} from \"react\";\nimport {useMatchMedia} from \"./MatchMedia\";\n\ntype PerkStarProps = {\n    filled?: boolean,\n    enabled: boolean,\n    special: string,\n    name: string,\n    rank: number,\n    level: number\n}\n\nconst PerkStar = ({filled = false, enabled, special, name, rank, level}: PerkStarProps) => {\n    const {add, remove, perkPointsRemaining} = useContext(PerksContext)\n    const {mediaSize} = useMatchMedia()\n\n    const [size, setSize] = useState(16)\n    const [addable, setAddable] = useState(false)\n\n    useEffect(() => {\n        if (mediaSize === \"xs\") {\n            setSize(48)\n        } else {\n            setSize(16)\n        }\n    }, [mediaSize])\n\n    const perk = {special, name, rank, level}\n\n    useEffect(() => {\n        setAddable(enabled && perkPointsRemaining() >= rank)\n    }, [enabled, perkPointsRemaining, rank])\n\n    return (\n        filled ?\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"yellow\"\n                width={size}\n                height={size}\n                className=\"bi bi-star-fill\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => remove(perk)}\n                style={{\n                    cursor: \"pointer\",\n                    fontSize: size\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\"/>\n            </svg>\n            :\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill={\"currentColor\"}\n                width={size}\n                height={size}\n                className=\"bi bi-star\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => addable && add(perk)}\n                style={{\n                    opacity: addable ? 1 : 0.3,\n                    cursor: addable ? \"pointer\" : \"cursor\",\n                    fontSize: size\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n                />\n            </svg>\n    )\n}\n\nexport default PerkStar\n","import {Image, OverlayTrigger, Popover} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerksContext from \"./PerksContext\"\nimport PerkStar from \"./PerkStar\"\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\"\nimport {useContext} from \"react\";\nimport {useMatchMedia} from \"./MatchMedia\";\n\ntype PerkProps = {\n    special: string,\n    img: string,\n    name: string,\n    rank: number,\n    levels: any[]\n}\n\nconst PerkElement = ({special, img, name, rank, levels}: PerkProps) => {\n    const {getLevel, getRank} = useContext(StatsContext)\n    const {perks} = useContext(PerksContext)\n    const {eq} = useMatchMedia()\n    return (\n        <div style={{\n            paddingTop: 10,\n            opacity: getRank(special) >= rank ? 1 : 0.3,\n            display: \"flex\",\n            justifyContent: \"center\"\n        }}>\n            <OverlayTrigger\n                trigger={[\"hover\", \"focus\"]}\n                placement={\"auto\"}\n                transition={false}\n                overlay={\n                    <Popover id={name}>\n                        <Popover.Title>{name}</Popover.Title>\n                        <Popover.Content>\n                            {\n                                levels.map(level => {\n                                    return (\n                                        <p key={`${level.name} ${level.rank}`}>\n                                            Rank {level.rank}\n                                            {\n                                                level.level > getLevel() &&\n                                                <span\n                                                    style={{\n                                                        fontSize: 12,\n                                                        fontWeight: 700,\n                                                        paddingLeft: 4\n                                                    }}\n                                                >\n                                                  (Requires Level {level.level})\n                                                </span>\n                                            }: {level.description}\n                                        </p>\n                                    )\n                                })\n                            }\n                        </Popover.Content>\n                    </Popover>\n                }\n            >\n                {\n                    ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                        <div\n                            ref={ref}\n                            style={{\n                                opacity: getRank(special) >= rank ? 1 : 0.3,\n                                display: \"inline-block\",\n                                justifyContent: \"center\"\n                            }}>\n                            <div {...triggerHandler}>\n                                <Image\n                                    src={`${process.env.PUBLIC_URL}/img/${img}`}\n                                    alt={name}\n                                    style={{\n                                        border: \"0px solid #777\",\n                                        width: eq(\"xs\") ? \"66vw\" : \"100%\",\n                                        height: eq(\"xs\") ? \"66vw\" : \"100%\",\n                                    }}\n                                />\n                            </div>\n                            {\n                                eq(\"xs\") && <h4 style={{textAlign: \"center\", paddingTop: 8}}>{name}</h4>\n                            }\n                            <div style={{\n                                display: \"flex\",\n                                justifyContent: \"center\"\n                            }}>\n                                {\n                                    levels.map(level => <PerkStar\n                                        key={`${name}-${level.rank}`}\n                                        filled={!!perks.find(it => it.name === name && it.rank >= level.rank)}\n                                        enabled={getRank(special) >= rank && getLevel() >= level.level}\n                                        special={special}\n                                        name={name}\n                                        rank={level.rank}\n                                        level={level.level}\n                                    />)\n                                }\n                            </div>\n                        </div>\n                }\n            </OverlayTrigger>\n        </div>\n    )\n}\n\nexport default PerkElement\n","import perks from \"./perks.json\"\nimport {Col, Row} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\n\nconst PerksGrid = () => {\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) => {\n                    return (\n                        <Row style={{padding: 12}}>\n                            {\n                                perks.map(\n                                    category => {\n                                        return (\n                                            <Col key={category.special} style={{padding: \"0px 12px\"}}>\n                                                <Row style={{fontWeight: 600}}>\n                                                    {category.special.substring(0, 2)}: {getRank(category.special)}\n                                                </Row>\n                                                {\n                                                    category.perks.map(\n                                                        perk => {\n                                                            return (\n                                                                <PerkElement\n                                                                    key={perk.name}\n                                                                    special={category.special}\n                                                                    img={perk.img}\n                                                                    name={perk.name}\n                                                                    rank={perk.rank}\n                                                                    levels={perk.ranked}\n                                                                />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Col>\n                                        )\n                                    }\n                                )\n                            }\n                        </Row>\n                    )\n                }}\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksGrid\n","import PerksContext from \"./PerksContext\"\nimport {useContext, useState} from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nconst PerksDetail = () => {\n    const {perks} = useContext(PerksContext)\n    const [show, setShow] = useState(true)\n    return (\n        <>\n            <div>\n                <h3 style={{display: \"inline\"}}>Perks Added</h3>\n                <Button\n                    size={\"sm\"}\n                    onClick={() => setShow(!show)}\n                    style={{\n                        padding: \"0.1rem 0.2rem\",\n                        marginBottom: 10,\n                        marginLeft: 10,\n                    }}\n                >\n                    {\n                        show ?\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"\n                                 fill=\"currentColor\" className=\"bi bi-dash\" viewBox=\"0 0 16 16\">\n                                <path\n                                    d=\"M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z\"/>\n                            </svg>\n                            :\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"\n                                 fill=\"currentColor\" className=\"bi bi-plus\" viewBox=\"0 0 16 16\">\n                                <path\n                                    d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"/>\n                            </svg>\n                    }\n                </Button>\n            </div>\n            <div>\n                {\n                    show &&\n                    Object.values(\n                        perks.reduce((obj, it) => {\n                            const {name, ranks, rank, level, description} = it\n                            const target = obj[it.name] || {name, ranks, ranked: []}\n                            target.ranked.push({rank, level, description})\n                            obj[it.name] = target\n                            return obj\n                        }, {} as any)\n                    )\n                    .map(({name, ranked, ranks}: any) =>\n                        <span key={name}>\n                                <p>{name}: {ranked.length} / {ranks}</p>\n                            {\n                                ranked.map((rank: any) =>\n                                    <p\n                                        key={rank.level}\n                                        style={{\n                                            paddingLeft: 20,\n                                            fontSize: 12\n                                        }}\n                                    >\n                                        {rank.description}\n                                    </p>\n                                )\n                            }\n                            </span>\n                    )\n                }\n            </div>\n        </>\n    )\n}\n\nexport default PerksDetail\n","import RangeSlider from \"react-bootstrap-range-slider\";\nimport {useContext} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\n\nconst LevelControl = () => {\n    const {getLevel, pointsRemaining, setLevel} = useContext(StatsContext)\n    const {perkPointsRemaining} = useContext(PerksContext)\n    return (\n        <div style={{paddingTop: 10}}>\n            Level: {getLevel()}\n            <div\n                style={{width: \"100%\"}}\n            >\n                <RangeSlider\n                    disabled={pointsRemaining() > 0}\n                    size={\"lg\"}\n                    value={getLevel()}\n                    tooltip={\"off\"}\n                    min={1}\n                    max={50}\n                    onChange={changeEvent => {\n                        const level = parseInt(changeEvent.target.value)\n                        setLevel(level)\n                    }}\n                />\n                {\n                    getLevel() > 1 &&\n                    perkPointsRemaining() >= 0\n                        ?\n                        <p>\n                            Remaining perk\n                            points: {perkPointsRemaining()}\n                        </p>\n                        :\n                        <p>Requires level: {getLevel() - perkPointsRemaining()}</p>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default LevelControl\n","import {Image} from \"react-bootstrap\";\nimport StatsContext, {StatType} from \"./StatsContext\";\n\nconst Bobbleheads = () =>\n    <StatsContext.Consumer>\n        {({bobbleToggle, hasBobblehead}) =>\n            <div style={{\n                display: \"inline-flex\",\n                justifyContent: \"space-evenly\",\n                width: \"100%\",\n                textAlign: \"center\",\n                paddingTop: 10\n            }}>\n                {Object.keys(StatType).map(name => name as StatType).map(name =>\n                    <span\n                        key={name}\n                        style={{\n                            padding: 10,\n                            opacity: hasBobblehead(name) ? 1 : 0.5,\n                            cursor: \"pointer\"\n                        }}\n                        onClick={() => bobbleToggle(name)}\n                    >\n                            <Image\n                                style={{\n                                    maxHeight: 40,\n                                    maxWidth: 30,\n                                    userSelect: \"none\"\n                                }}\n                                src={`${process.env.PUBLIC_URL}/img/bobblehead.png`}\n                            />\n                            <p style={{userSelect: \"none\"}}>{name.substring(0, 2)}</p>\n                    </span>\n                )}\n            </div>\n        }\n    </StatsContext.Consumer>\n\nexport default Bobbleheads\n","import SpecialPerks from \"./perks.json\"\nimport {Col, Row, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\nimport {useState} from \"react\";\n\ntype PerkTreePerkRank = { rank: number; level: number; description: string; }\n\ntype PerkTreePerk = { rank: number; name: string; img: string; ranks: number; ranked: PerkTreePerkRank[]; }\n\ntype PerkTreeCategory = { special: string; perks: PerkTreePerk[] }\n\nconst PerksTower = () => {\n    const [category, setCategory] = useState<PerkTreeCategory>()\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) =>\n                    <Row style={{padding: 12}}>\n                        <ToggleButtonGroup type={\"radio\"} name={\"special\"}>\n                            {\n                                (SpecialPerks as PerkTreeCategory[])\n                                .map(it =>\n                                    <ToggleButton\n                                        onClick={() => setCategory(it)}\n                                        value={it.special}\n                                        variant={category?.special === it.special ? \"primary\" : \"light\"}\n                                    >\n                                        {it.special.substring(0, 2)}\n                                    </ToggleButton>\n                                )\n                            }\n                        </ToggleButtonGroup>\n                        {\n                            category &&\n                            <Col style={{padding: 12}}>\n                              <Row style={{fontWeight: 600, textAlign: \"center\"}}>\n                                  <h3>{category.special}: {getRank(category.special)}</h3>\n                              </Row>\n                                {\n                                    category.perks\n                                    .map(perk =>\n                                        <PerkElement\n                                            key={perk.name}\n                                            special={category.special}\n                                            img={perk.img}\n                                            name={perk.name}\n                                            rank={perk.rank}\n                                            levels={perk.ranked}\n                                        />\n                                    )\n                                }\n                            </Col>\n                        }\n                    </Row>\n                }\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksTower\n","import {useContext} from \"react\";\nimport BuildContext from \"./BuildContext\";\n\nconst BuildInfo = () => {\n    const {name} = useContext(BuildContext)\n    return (\n        <h1 style={{marginBottom: 20}}>\n            {\n                name\n                // || <span style={{color: \"grey\", fontStyle: \"italic\"}}>Choose a build name</span>\n            }\n        </h1>\n    )\n}\n\nexport default BuildInfo\n","import \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport {PropsWithChildren, useContext, useEffect, useMemo} from \"react\"\nimport {Col, Container, Row} from \"react-bootstrap\"\n\nimport LZUTF8 from \"lzutf8\";\n\nimport BuildContext, {useBuild} from \"./BuildContext\";\nimport StatsContext, {useStats} from \"./StatsContext\"\nimport PerksContext, {Perk, usePerks} from \"./PerksContext\"\nimport StartingStats from \"./StartingStats\"\nimport Header from \"./Header\"\nimport PerksGrid from \"./PerksGrid\"\nimport PerksDetail from \"./PerksDetail\"\nimport LevelControl from \"./LevelControl\";\nimport Bobbleheads from \"./Bobbleheads\";\nimport {useMatchMedia} from \"./MatchMedia\";\nimport Buttons from \"./Buttons\";\nimport PerksTower from \"./PerksTower\";\nimport BuildInfo from \"./BuildInfo\";\n\nconst usePreserveState = () => {\n    const {SPECIAL, getLevel, getBobbleHeads} = useContext(StatsContext)\n    const {perks} = useContext(PerksContext)\n    const {name} = useContext(BuildContext)\n    useEffect(() => {\n        const state = {\n            name,\n            SPECIAL,\n            level: getLevel(),\n            bobbleheads: getBobbleHeads(),\n            perksAdded: perks.map(it => {\n                const {name, rank} = it\n                return {name, rank} as Perk\n            })\n            .reduce((arr, perk) => {\n                const existing = arr.findIndex(it => it.name === perk.name)\n                if (existing >= 0) arr.splice(existing, 1)\n                arr.push(perk)\n                return arr\n            }, [] as Perk[])\n        }\n        window.history.replaceState(null, document.title, `#${LZUTF8.compress(JSON.stringify(state), {outputEncoding: \"Base64\"})}`)\n    }, [name, SPECIAL, perks, getLevel, getBobbleHeads])\n}\n\nconst AppStateListener = ({children}: PropsWithChildren<any>) => {\n    usePreserveState()\n    return (<>{children}</>)\n}\n\nconst AppContextProvider = ({children}: PropsWithChildren<any>) => {\n    const {\n        name,\n        SPECIAL,\n        level,\n        perksAdded,\n        bobbleheads,\n    } = JSON.parse(LZUTF8.decompress(window.location.hash.substring(1, window.location.hash.length), {inputEncoding: \"Base64\"}) || \"{}\")\n    const stats = useStats({SPECIAL, level, bobbleheads})\n    const perks = usePerks({level: stats.getLevel(), perksAdded})\n    const build = useBuild({name})\n    return (\n        <StatsContext.Provider value={stats}>\n            <PerksContext.Provider value={useMemo(() => perks, [perks])}>\n                <BuildContext.Provider value={useMemo(() => build, [build])}>\n                    <AppStateListener>\n                        {children}\n                    </AppStateListener>\n                </BuildContext.Provider>\n            </PerksContext.Provider>\n        </StatsContext.Provider>\n    )\n}\n\nconst App = () => {\n    const {eq, gt} = useMatchMedia()\n    return (\n        <AppContextProvider>\n            <Container fluid>\n                <Header/>\n                {eq(\"xs\") && <div style={{marginBottom: 20}}><Buttons/></div>}\n                <Row>\n                    <Col xl={3}>\n                        <BuildInfo/>\n                        <StartingStats/>\n                        <Bobbleheads/>\n                        <LevelControl/>\n                        <PerksDetail/>\n                    </Col>\n                    <Col xl={9}>\n                        {\n                            gt(\"xs\") ?\n                                <PerksGrid/>\n                                :\n                                <PerksTower/>\n                        }\n                    </Col>\n                </Row>\n            </Container>\n        </AppContextProvider>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}