{"version":3,"sources":["StatsContext.ts","Perks.ts","PerksContext.ts","BuildContext.ts","MatchMedia.ts","StartingStats.tsx","RenameModal.tsx","Modal.ts","ShareModal.tsx","BuildHistory.tsx","BuildHistoryModal.tsx","Buttons.tsx","Randomizer.ts","Header.tsx","PerkStar.tsx","PerkElement.tsx","PerksGrid.tsx","PerksDetail.tsx","Bobbleheads.tsx","PerksTower.tsx","BuildInfo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["StatType","defaultSpecial","Object","keys","reduce","obj","key","StatsContext","React","createContext","SPECIAL","PerksData","PerksContext","flatMap","it","special","perks","map","name","requiredSpecial","rank","ranked","level","description","ranks","length","getDb","JSON","parse","window","localStorage","getItem","setDb","collection","setItem","stringify","useBuild","buildName","useContext","setSpecial","resetStats","reset","setPerks","resetPerks","useState","setName","uuid_v4","id","setId","lastSaved","setLastSaved","history","setHistory","save","useCallback","db","now","Date","entry","find","createdAt","data","LZUTF8","compress","outputEncoding","filtered","filter","unshift","updateDb","updatedAt","get","one","build","decompress","inputEncoding","remove","removeAll","restart","undefined","load","target","BuildContext","Breakpoints","Stat","value","increment","decrement","pointsRemaining","getRank","hasBobblehead","ListGroupItem","style","userSelect","className","Button","size","padding","onClick","perk","a","b","removePerks","disabled","paddingLeft","paddingRight","minWidth","StartingStats","Consumer","marginBottom","ListGroup","entries","RenameModal","show","setShow","saveBuild","Modal","onHide","centered","Header","Body","InputGroup","Form","Control","type","onChange","e","Footer","useModal","ShareModal","location","href","readOnly","Append","OverlayTrigger","trigger","delay","overlay","Tooltip","placement","ref","triggerHandler","Text","cursor","navigator","clipboard","writeText","xmlns","width","height","fill","viewBox","marginTop","marginLeft","d","ConfirmRemoveButton","children","message","useRef","confirming","setConfirming","callback","useEffect","listener","current","contains","document","addEventListener","removeEventListener","useOnClickAwayListener","color","fontSize","fontStyle","Children","child","onClickCapture","stopPropagation","confirm","noop","RemoveButton","BuildHistory","marginRight","paddingBottom","BuildHistoryModal","Buttons","showShareModal","setShowShareModal","showRenameModal","setShowRenameModal","showBuildHistoryModal","setShowBuildHistoryModal","getLevel","setLevel","perkPointsRemaining","addPerk","add","availablePerks","getPerkRank","randomizing","setRandomizing","failedAddPerkCount","setFailedAddPerkCount","stats","stat","Math","floor","random","available","count","failed","outOfPoints","randomize","useRandomizer","buttonStyle","ButtonToolbar","variant","maxWidth","mediaSizes","xs","sm","md","lg","xl","xxl","useMatchMedia","mediaSize","setMediaSize","mediaQueryList","matchMedia","forEach","matches","gt","breakpoint","eq","lt","Navbar","bg","Brand","src","process","alt","fontWeight","PerkStar","filled","enabled","setSize","addable","setAddable","opacity","PerkElement","perkTreePerk","getPerk","img","obtainable","paddingTop","display","justifyContent","transition","Popover","Title","Content","showLevelRequirement","Image","border","textAlign","PerksGrid","Row","category","Col","substring","PerksDetail","perkLevelRequired","requiredLevel","useMemo","max","alignItems","values","push","Bobbleheads","bobbleToggle","maxHeight","PerksTower","setCategory","ToggleButtonGroup","ToggleButton","BuildInfo","AppStateListener","getBobbleHeads","state","bobbleheads","arr","existing","findIndex","splice","replaceState","title","usePreserveState","BuildContextProvider","Provider","AppContextProvider","hash","perksAdded","initialLevel","savedBobbleheads","setBobbleheads","changeValue","min","pointsUsed","found","useStats","added","local","other","concat","higher","usePerks","App","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9451f5c7.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport type SPECIAL = {\n    STRENGTH: number,\n    PERCEPTION: number,\n    ENDURANCE: number,\n    CHARISMA: number,\n    INTELLIGENCE: number,\n    AGILITY: number,\n    LUCK: number\n}\n\nexport type Stats = {\n    SPECIAL: SPECIAL,\n    setSpecial: (special: SPECIAL) => void,\n    increment: (stat: string) => void,\n    decrement: (stat: string) => void,\n    reset: () => void,\n    pointsRemaining: () => number,\n    getRank: (stat: string) => number,\n    getLevel: () => number,\n    setLevel: (level: number) => void,\n    getBobbleHeads: () => StatType[],\n    bobbleToggle: (stat: StatType) => void,\n    hasBobblehead: (stat: string) => boolean\n}\n\nexport enum StatType {\n    STRENGTH = \"STRENGTH\", PERCEPTION = \"PERCEPTION\", ENDURANCE = \"ENDURANCE\", CHARISMA = \"CHARISMA\", INTELLIGENCE = \"INTELLIGENCE\", AGILITY = \"AGILITY\", LUCK = \"LUCK\"\n}\n\nconst defaultSpecial = Object.keys(StatType).reduce((obj, key) => {\n    obj[key] = 1\n    return obj\n}, {} as any) as SPECIAL\n\nconst MAX_POINTS = 28\n\nexport const useStats = ({\n                             SPECIAL: special = defaultSpecial,\n                             level: initialLevel = 50,\n                             bobbleheads: savedBobbleheads = []\n                         }: { SPECIAL?: SPECIAL, level?: number, bobbleheads: [] }): Stats => {\n    const [SPECIAL, setSpecial] = useState<SPECIAL>(special)\n    const [level, setLevel] = useState(initialLevel)\n    const [bobbleheads, setBobbleheads] = useState<StatType[]>(savedBobbleheads)\n\n    const changeValue = (stat: string, value: number) => {\n        const target = getRank(stat);\n        setSpecial({\n            ...SPECIAL,\n            [stat]: Math.min(Math.max(target + value, 1), bobbleheads.findIndex(it => it === stat) >= 0 ? 11 : 10)\n        })\n    }\n\n    const increment = (stat: string) => {\n        changeValue(stat, 1)\n    }\n\n    const decrement = (stat: string) => changeValue(stat, -1)\n\n    const pointsRemaining = () => {\n        const pointsUsed = Object.values(SPECIAL).reduce((a, b) => a + Math.min(b, 11), 0) - bobbleheads.length\n        return Math.max(0, MAX_POINTS - pointsUsed)\n    }\n\n    const getRank = (stat: string): number => (SPECIAL as any)[stat]\n\n    const reset = () => {\n        setSpecial(defaultSpecial)\n        setBobbleheads([])\n    }\n\n    const bobbleToggle = (stat: StatType) => {\n        const found = bobbleheads.findIndex(it => it === stat)\n        if (found < 0) {\n            bobbleheads.push(stat)\n            increment(stat)\n        } else {\n            bobbleheads.splice(found, 1)\n            decrement(stat)\n        }\n        setBobbleheads([...bobbleheads])\n    }\n\n    return {\n        SPECIAL,\n        setSpecial,\n        increment,\n        decrement,\n        reset,\n        pointsRemaining,\n        getRank,\n        getLevel: () => level,\n        setLevel: (level: number) => setLevel(Math.min(level, 50)),\n        getBobbleHeads: () => bobbleheads,\n        bobbleToggle,\n        hasBobblehead: (stat: string) => !!bobbleheads.find(it => it === stat),\n    } as Stats;\n}\n\nconst StatsContext = React.createContext<Stats>({SPECIAL: defaultSpecial} as Stats)\n\nexport default StatsContext\n","import data from \"./perks.json\"\nimport {Perk} from \"./PerksContext\";\n\nexport type PerkTreePerkRank = { rank: number; level: number; description: string; }\n\nexport type PerkTreePerk = { rank: number; name: string; img: string; ranks: number; ranked: PerkTreePerkRank[]; }\n\nexport type PerkTreeCategory = { special: string; perks: PerkTreePerk[] }\n\nexport const PerksData = data as PerkTreeCategory[]\n\nexport const Perks = PerksData\n.flatMap((it: any) => {\n    const {special, perks} = it\n    return perks.map((it: any) => ({special, ...it}))\n})\n.flatMap((it: any) => {\n    const {special, name, rank: requiredSpecial, ranked} = it\n    return ranked.map((it: any) => {\n        const {level, rank, description} = it\n        return {\n            special,\n            name,\n            level,\n            rank,\n            requiredSpecial,\n            description,\n            ranks: ranked.length\n        }\n    })\n}) as Perk[]\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {PerksData} from \"./Perks\";\n\nexport type Perk = {\n    special: string,\n    name: string,\n    rank: number,\n    level: number,\n    requiredSpecial?: number,\n    description?: string,\n    ranks?: number\n}\n\nexport type Perks = {\n    perks: Perk[],\n    setPerks: (perks: Perk[]) => void,\n    add: (perk: Perk) => void,\n    remove: (perk: Perk) => void,\n    perkPointsRemaining: () => number,\n    availablePerks: () => Perk[],\n    reset: () => void,\n    perkLevelRequired: number,\n    getPerkRank: (name: String) => number,\n    getPerk: (name: String) => Perk | undefined\n}\n\ntype UsePerks = { level: number, perksAdded?: Perk[] }\n\nexport const usePerks = ({level, perksAdded = []}: UsePerks): Perks => {\n    const [perks, setPerks] = useState<Array<Perk>>(\n        PerksData\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, rank: requiredSpecial, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {\n                    special,\n                    name,\n                    level,\n                    rank,\n                    description,\n                    requiredSpecial,\n                    ranks: ranked.length\n                }\n            })\n        })\n        .filter(it => perksAdded.find(added => it.name === added.name && it.rank <= added.rank))\n    )\n\n    const add = (perk: Perk) => {\n        const local = PerksData\n        .find(it => it.special === perk.special)\n        ?.perks\n        .find(it => it.name === perk.name)\n        const add = local\n        ?.ranked\n        .map(it => ({...it, name: local.name, ranks: local.ranks, requiredSpecial: local.rank}))\n        .filter(it => it.rank <= perk.rank)\n        .map(it => ({...it, special: perk.special} as Perk)) as Perk[]\n        const other = perks.filter(it => it.name !== perk.name)\n        setPerks([...other].concat(add))\n    }\n\n    const remove = (perk: Perk) => {\n        const existing = perks.filter(it => it.name === perk.name)\n        const other = perks.filter(it => it.name !== perk.name)\n        const higher = existing.find(it => it.rank > perk.rank)\n        const add = existing.filter(it => higher ? it.rank <= perk.rank : it.rank < perk.rank)\n        setPerks([...other, ...add])\n    }\n\n    const perkPointsRemaining = () => level - 1 - perks.length\n\n    const availablePerks = () =>\n        PerksData\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, rank: requiredSpecial, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {\n                    special,\n                    name,\n                    level,\n                    rank,\n                    requiredSpecial,\n                    description,\n                    ranks: ranked.length\n                }\n            })\n        })\n        .filter(it => !perks.find(perk => it.name === perk.name && it.rank <= perk.rank))\n\n    const getPerk = (name: String) => perks\n    .filter(it => it.name === name)\n    .reduce((a, b) => a.rank > b.rank ? a : b, {} as Perk)\n\n    const getPerkRank = (name: String) => perks.filter(it => it.name === name)?.length ?? 0\n\n    const reset = () => {\n        setPerks([])\n    }\n\n    const perkLevelRequired = useMemo(() => perks.reduce((a, b) => a.level > b.level ? a : b, {} as Perk).level ?? 0, [perks])\n\n    useEffect(() => {\n        setPerks(perks => perks.filter(it => it.level < level))\n    }, [level])\n\n    return {\n        perks,\n        setPerks,\n        add,\n        remove,\n        perkPointsRemaining,\n        availablePerks,\n        getPerkRank,\n        getPerk,\n        perkLevelRequired,\n        reset\n    } as Perks\n}\n\nconst PerksContext = React.createContext<Perks>({perks: [] as Perk[]} as Perks)\n\nexport default PerksContext\n","import React, {useCallback, useContext, useState} from \"react\";\nimport StatsContext, {SPECIAL} from \"./StatsContext\";\nimport PerksContext, {Perk} from \"./PerksContext\";\nimport LZUTF8 from \"lzutf8\";\nimport {v4 as uuid_v4} from \"uuid\";\n\ntype Entry = { data: string } & Metadata\n\nconst getDb = () => {\n    return JSON.parse(window.localStorage.getItem(\"DATABASE\") ?? \"[]\") as Array<Entry>\n}\n\nconst updateDb = (entry: Entry) => {\n    const db = getDb()\n    const filtered = db.filter(it => it.id !== entry.id)\n    filtered.unshift(entry)\n    window.localStorage.setItem(\"DATABASE\", JSON.stringify(filtered))\n}\n\nconst setDb = (collection: Entry[]) => {\n    window.localStorage.setItem(\"DATABASE\", JSON.stringify(collection))\n}\n\ntype Metadata = { id: string, name: string, createdAt: Date, updatedAt: Date }\n\ntype BuildData = {\n    SPECIAL: SPECIAL,\n    perks: Perk[]\n}\n\ntype UseBuild = {\n    name?: string\n}\n\nexport const useBuild = ({name: buildName}: UseBuild) => {\n    const {SPECIAL, setSpecial, reset: resetStats} = useContext(StatsContext)\n    const {perks, setPerks, reset: resetPerks} = useContext(PerksContext)\n    const [name, setName] = useState<string | undefined>(buildName)\n    const [id, setId] = useState(uuid_v4())\n    const [lastSaved, setLastSaved] = useState<Date | undefined>()\n    const [history, setHistory] = useState<Metadata[]>(getDb())\n\n    const save = useCallback((buildName: string) => {\n        const db = getDb()\n        const now = new Date()\n        const entry = db.find(it => it.id === id) as Entry ?? {\n            id,\n            createdAt: now\n        }\n        const data = LZUTF8.compress(JSON.stringify({\n            name: buildName,\n            SPECIAL,\n            perks\n        } as BuildData), {outputEncoding: \"Base64\"}) as string\n        updateDb({...entry, name: buildName, data, updatedAt: now})\n        setLastSaved(now)\n        setName(buildName)\n        setHistory(getDb())\n    }, [SPECIAL, perks, id, setLastSaved, setName, setHistory])\n\n    const get = useCallback((id: string): BuildData & Metadata | undefined => {\n        const db = getDb()\n        const one = db.find(it => it.id === id)\n        if (one) {\n            const {id, name, data, createdAt, updatedAt} = one\n            const build = JSON.parse(LZUTF8.decompress(data, {inputEncoding: \"Base64\"}) ?? \"{}\") as BuildData\n            return {id, name, ...build, createdAt, updatedAt}\n        }\n        return undefined\n    }, [])\n\n    const remove = useCallback((id: string) => {\n        const db = getDb()\n        const filtered = db.filter(it => it.id !== id)\n        setDb(filtered)\n        setHistory(filtered)\n    }, [])\n\n    const removeAll = useCallback(() => {\n        setDb([])\n        setHistory([])\n    }, [])\n\n    const restart = () => {\n        setId(uuid_v4())\n        setName(undefined)\n        resetStats()\n        resetPerks()\n    }\n\n    const load = (id: string) => {\n        const target = get(id)\n        if (target) {\n            const {name, perks, SPECIAL} = target\n            setName(name)\n            setPerks(perks)\n            setSpecial(SPECIAL)\n        }\n    }\n\n    return {\n        name,\n        setName,\n        lastSaved,\n        get,\n        history,\n        save,\n        restart,\n        remove,\n        removeAll,\n        load\n    } as Build\n}\n\ntype Build = {\n    name?: string,\n    lastSaved?: Date,\n    get: (id: string) => BuildData & Metadata | undefined,\n    history: Metadata[]\n    save: (buildName: string) => void,\n    restart: () => void,\n    remove: (id: string) => void,\n    removeAll: () => void,\n    load: (id: string) => void\n}\n\nconst BuildContext = React.createContext({} as Build)\n\nexport default BuildContext\n\nconst initDb = () => {\n    const db = getDb()\n    if (db) {\n        return;\n    }\n    window.localStorage.setItem(\"DATABASE\", JSON.stringify([]))\n}\n\ninitDb()\n","import {useEffect, useState} from \"react\";\n\nconst maxWidth = (width: number) => `(max-width: ${width - .02}px)`\n\nconst minWidth = (width: number) => `(min-width: ${width}px)`\n\nexport enum Breakpoints {\n    xs,\n    sm,\n    md,\n    lg,\n    xl,\n    xxl\n}\n\n// const breakpoints = [576, 768, 992, 1200]\n\nconst mediaSizes = {\n    xs: maxWidth(576),\n    sm: `${minWidth(576)} and ${maxWidth(768)}`,\n    md: `${minWidth(768)} and ${maxWidth(992)}`,\n    lg: `${minWidth(992)} and ${maxWidth(1200)}`,\n    xl: `${minWidth(1200)} and ${maxWidth(1920)}`,\n    xxl: `${minWidth(1920)}`\n}\n\nexport const useMatchMedia = () => {\n\n    const [mediaSize, setMediaSize] = useState<string>()\n\n    const gt = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] > (Breakpoints as any)[breakpoint] : true\n    }\n\n    const eq = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] === (Breakpoints as any)[breakpoint] : true\n    }\n\n    const lt = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] < (Breakpoints as any)[breakpoint] : true\n    }\n\n    useEffect(() => {\n        Object\n        .entries(mediaSizes)\n        .map(([key, value]) => ({key, mediaQueryList: window.matchMedia(value)}))\n        .forEach(({key, mediaQueryList}) => {\n            mediaQueryList.addEventListener(\"change\", it => {\n                if (it.matches) {\n                    setMediaSize(key)\n                }\n            })\n            if (mediaQueryList.matches) {\n                setMediaSize(key)\n            }\n        })\n    }, [])\n\n    return {\n        mediaSize,\n        gt,\n        eq,\n        lt\n    }\n}\n","import StatsContext, {Stats} from \"./StatsContext\"\nimport {Button, ListGroup, ListGroupItem} from \"react-bootstrap\"\nimport {useContext} from \"react\";\nimport PerksContext, {Perk} from \"./PerksContext\";\n\nconst StartingStats = () => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({SPECIAL, pointsRemaining}: Stats) => {\n                    return (\n                        <>\n                            <div style={{padding: 2, marginBottom: 10}}>\n                                <h3>S.P.E.C.I.A.L</h3>\n                                <span>{pointsRemaining()} points left to spend</span>\n                            </div>\n                            <ListGroup>\n                                {\n                                    Object.entries(SPECIAL)\n                                    .map(\n                                        ([name, value]) =>\n                                            <Stat key={name} name={name} value={value}/>\n                                    )\n                                }\n                            </ListGroup>\n                        </>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype StatProps = {\n    name: string,\n    value: number\n}\n\nconst Stat = ({name, value}: StatProps) => {\n    const {increment, decrement, pointsRemaining, getRank, hasBobblehead} = useContext(StatsContext)\n    const {perks, remove} = useContext(PerksContext)\n\n    const removePerks = (special: string) => {\n        const perk = perks\n        .filter(it => it.special === special && it.requiredSpecial === value)\n        .reduce((a, b) => a.rank < b.rank ? a : b, {} as Perk)\n        perk && remove({...perk, rank: 0})\n    }\n\n    return (\n        <ListGroupItem>\n            <span style={{userSelect: \"none\"}}>\n                {name}:\n            </span>\n            <span className={\"float-end\"}>\n                <Button size={\"sm\"}\n                        style={{padding: \".1rem .5rem\"}}\n                        onClick={\n                            () => {\n                                decrement(name)\n                                removePerks(name)\n                            }\n                        }\n                        disabled={value <= (hasBobblehead(name) ? 2 : 1)}\n                >\n                    -\n                </Button>\n                <span\n                    style={{\n                        paddingLeft: 10,\n                        paddingRight: 10,\n                        minWidth: 40,\n                        userSelect: \"none\"\n                    }}\n                >\n                    {value}\n                </span>\n                <Button size={\"sm\"}\n                        style={{padding: \".1rem .5rem\"}}\n                        onClick={() => increment(name)}\n                        disabled={getRank(name) >= (hasBobblehead(name) ? 11 : 10) || pointsRemaining() <= 0}\n                >\n                    +\n                </Button>\n            </span>\n        </ListGroupItem>\n    )\n}\n\nexport default StartingStats\n","import {useContext, useState} from \"react\";\nimport BuildContext from \"./BuildContext\";\nimport {Button, Form, InputGroup, Modal} from \"react-bootstrap\";\nimport {UseModal} from \"./Modal\";\n\nconst RenameModal = ({show, setShow}: UseModal) => {\n    const {name: buildName, save: saveBuild} = useContext(BuildContext)\n    const [name, setName] = useState(buildName || \"\")\n    return (\n        <Modal show={show} onHide={() => setShow(false)} centered>\n            <Modal.Header>Name your build!</Modal.Header>\n            <Modal.Body>\n                <InputGroup>\n                    <Form.Control\n                        type={\"text\"}\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                    />\n                </InputGroup>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    className={\"float-end\"}\n                    onClick={() => {\n                        saveBuild(name)\n                        setShow(false)\n                    }}\n                >\n                    Save\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default RenameModal\n","import {useState} from \"react\";\n\nexport type UseModal = {\n    show: boolean,\n    setShow: (value: boolean) => void\n}\n\nexport const useModal = () => {\n    const [show, setShow] = useState(false)\n\n    return {\n        show,\n        setShow\n    } as UseModal\n}\n","import {Form, InputGroup, Modal, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\";\nimport {UseModal} from \"./Modal\";\n\nconst ShareModal = ({show, setShow}: UseModal) => {\n    return (\n        <Modal show={show} onHide={() => setShow(false)} centered>\n            <Modal.Header>Share your build with friends!</Modal.Header>\n            <Modal.Body>\n                <InputGroup>\n                    <Form.Control type={\"text\"} value={window.location.href} readOnly={true}/>\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            trigger={\"click\"}\n                            delay={50}\n                            overlay={\n                                <Tooltip id={\"copiedToClipboard\"}>\n                                    Copied to clipboard!\n                                </Tooltip>\n                            }\n                            placement={\"top\"}\n                        >\n                            {\n                                ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                                    <InputGroup.Text\n                                        style={{\n                                            cursor: \"pointer\"\n                                        }}\n                                        onClick={() => navigator.clipboard.writeText(window.location.href)}\n                                        {...triggerHandler}\n                                        ref={ref}\n                                    >\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            width=\"24\"\n                                            height=\"24\"\n                                            fill=\"currentColor\"\n                                            className=\"bi bi-clipboard\"\n                                            viewBox=\"0 0 24 24\"\n                                            style={{\n                                                marginTop: 4,\n                                                marginLeft: 4\n                                            }}\n                                        >\n                                            <path\n                                                d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\"/>\n                                            <path\n                                                d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\"/>\n                                        </svg>\n                                    </InputGroup.Text>\n                            }\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ShareModal\n","import React, {\n    MouseEventHandler,\n    PropsWithChildren,\n    RefObject,\n    useContext,\n    useEffect,\n    useRef,\n    useState\n} from \"react\";\nimport BuildContext from \"./BuildContext\";\nimport {ListGroup, ListGroupItem} from \"react-bootstrap\";\n\nconst BuildHistory = () => {\n    const {history, remove, removeAll, load} = useContext(BuildContext)\n\n    if (history.length <= 0) {\n        return null\n    }\n\n    return (\n        <div style={{marginBottom: 20}}>\n            <span>\n                <h3 style={{marginBottom: 10}}>\n                    History\n                    <span\n                        className={\"float-end\"}\n                        style={{\n                            marginRight: 12,\n                            paddingBottom: 2\n                        }}\n                    >\n                        <ConfirmRemoveButton\n                            message={\"Are you sure you want to remove all items?\"}\n                        >\n                            <RemoveButton fontSize={24} onClick={() => removeAll()}/>\n                        </ConfirmRemoveButton>\n                    </span>\n                </h3>\n            </span>\n            <ListGroup>\n                {\n                    history.map(entry =>\n                        <ListGroupItem>\n                            <span\n                                style={{cursor: \"pointer\"}}\n                                onClick={() => load(entry.id)}\n                            >\n                                {entry.name}\n                            </span>\n                            <span className={\"float-end\"}>\n                                <ConfirmRemoveButton\n                                    message={\"Are you sure you want to remove this item?\"}\n                                >\n                                    <span style={{\n                                        fontSize: \"0.75em\",\n                                        paddingRight: 8,\n                                        color: \"gray\",\n                                        fontStyle: \"italic\"\n                                    }}>\n                                        Last Updated: {entry.updatedAt}\n                                    </span>\n                                    <RemoveButton onClick={() => remove(entry.id)}/>\n                                </ConfirmRemoveButton>\n                            </span>\n                        </ListGroupItem>\n                    )\n                }\n            </ListGroup>\n        </div>\n    )\n}\n\ntype UseOnClickAwayListener = {\n    ref: RefObject<HTMLSpanElement>,\n    callback: (e: Event) => void\n}\n\nconst useOnClickAwayListener = ({ref, callback}: UseOnClickAwayListener) => {\n    useEffect(() => {\n        const listener = (e: Event) => {\n            if (ref.current && !ref.current.contains(e.target as Node)) {\n                callback(e)\n            }\n        }\n        document.addEventListener(\"mousedown\", listener)\n        return () => {\n            document.removeEventListener(\"mousedown\", listener)\n        }\n    }, [ref, callback])\n}\n\nconst ConfirmRemoveButton = ({\n                                 children,\n                                 message\n                             }: PropsWithChildren<any> & { message?: string }) => {\n    const ref = useRef<HTMLSpanElement>(null)\n    const [confirming, setConfirming] = useState(false)\n    const confirm = (e: React.MouseEvent<HTMLSpanElement>) => {\n        if (!confirming) {\n            e.stopPropagation()\n        }\n        setConfirming(!confirming)\n    }\n\n    const cancel = (e: Event) => {\n        setConfirming(false)\n    }\n\n    useOnClickAwayListener({ref, callback: cancel})\n\n    return (\n        <span style={confirming ? {color: \"red\",} : {}}>\n            {\n                confirming &&\n                <span\n                    style={{\n                        fontSize: \"0.75em\",\n                        paddingRight: 8,\n                        fontStyle: \"italic\"\n                    }}\n                >\n                    {message ?? \"Are you sure?\"}\n                </span>\n            }\n            <>\n                {\n                    React.Children.map(children,\n                        child => child.type.name === \"RemoveButton\" ?\n                            <span\n                                onClickCapture={(e: React.MouseEvent<HTMLSpanElement>) => confirm(e)}\n                                ref={ref}\n                            >\n                                {child}\n                            </span>\n                            :\n                            confirming ? null : child\n                    )\n                }\n            </>\n        </span>\n    )\n\n}\n\nconst noop = () => {\n}\n\ntype RemoveButtonProps =\n    {\n        fontSize?: number, onClick?: MouseEventHandler<SVGSVGElement> | undefined\n    }\n\nconst RemoveButton = (\n    {\n        fontSize = 16, onClick = noop\n    }\n        : RemoveButtonProps) =>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width={`${fontSize}`} height={`${fontSize}`}\n         fill=\"currentColor\" className=\"bi bi-x-circle\"\n         viewBox=\"0 0 16 16\"\n         onClick={onClick}\n         style={{cursor: \"pointer\", fontSize}}\n    >\n        <path\n            d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n        <path\n            d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\n    </svg>\n\nexport default BuildHistory\n","import {UseModal} from \"./Modal\";\nimport {Modal} from \"react-bootstrap\";\nimport BuildHistory from \"./BuildHistory\";\n\nconst BuildHistoryModal = ({show, setShow}: UseModal) =>\n    <Modal show={show} onHide={() => setShow(false)} centered>\n        <Modal.Header>Recent builds</Modal.Header>\n        <Modal.Body>\n            <BuildHistory/>\n        </Modal.Body>\n    </Modal>\n\nexport default BuildHistoryModal\n","import {Button, ButtonToolbar} from \"react-bootstrap\";\nimport {useContext} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\nimport {useRandomizer} from \"./Randomizer\";\nimport BuildContext from \"./BuildContext\";\nimport RenameModal from \"./RenameModal\";\nimport {useModal} from \"./Modal\";\nimport ShareModal from \"./ShareModal\";\nimport BuildHistoryModal from \"./BuildHistoryModal\";\n\nconst Buttons = () => {\n    const {restart} = useContext(BuildContext)\n    const {reset: resetStats} = useContext(StatsContext)\n    const {reset: resetPerks} = useContext(PerksContext)\n    const {show: showShareModal, setShow: setShowShareModal} = useModal()\n    const {show: showRenameModal, setShow: setShowRenameModal} = useModal()\n    const {show: showBuildHistoryModal, setShow: setShowBuildHistoryModal} = useModal()\n\n    const {randomize, randomizing} = useRandomizer()\n\n    const share = () => setShowShareModal(!showShareModal)\n\n    const save = () => setShowRenameModal(!showRenameModal)\n\n    const reset = () => {\n        resetStats();\n        resetPerks();\n    }\n\n    const recent = () => setShowBuildHistoryModal(!showBuildHistoryModal)\n\n    const buttonStyle = {fontSize: 14, marginRight: 10}\n\n    return (\n        <>\n            <ButtonToolbar>\n                <Button style={buttonStyle} variant={\"success\"} onClick={() => restart()}>\n                    New\n                </Button>\n                <Button style={buttonStyle} variant={\"primary\"} onClick={() => save()}>\n                    Save\n                </Button>\n                {\n                    showRenameModal &&\n                    <RenameModal show={showRenameModal} setShow={setShowRenameModal}/>\n                }\n                <Button style={buttonStyle} variant={\"outline-danger\"} onClick={() => reset()}\n                        disabled={randomizing}>\n                    Reset\n                </Button>\n                <Button style={buttonStyle} variant={\"outline-primary\"} onClick={() => share()}\n                        disabled={randomizing}>\n                    Share\n                </Button>\n                <ShareModal show={showShareModal} setShow={setShowShareModal}/>\n            </ButtonToolbar>\n            <ButtonToolbar style={{paddingLeft: 20}}>\n                <Button style={buttonStyle} variant={\"secondary\"} onClick={() => recent()}>\n                    Show History\n                </Button>\n                <BuildHistoryModal show={showBuildHistoryModal} setShow={setShowBuildHistoryModal}/>\n                <Button style={buttonStyle} variant={\"outline-success\"} onClick={() => randomize()}\n                        disabled={randomizing}>\n                    Randomize\n                </Button>\n            </ButtonToolbar>\n        </>\n    )\n\n}\n\nexport default Buttons\n","import {useContext, useEffect, useState} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\n\nconst MAX_FAILURES = 100\n\nexport const useRandomizer = () => {\n    const {\n        getLevel,\n        setLevel,\n        pointsRemaining,\n        increment,\n        SPECIAL,\n        reset: resetStats\n    } = useContext(StatsContext)\n    const {\n        perkPointsRemaining,\n        add: addPerk,\n        availablePerks,\n        getPerkRank,\n        reset: resetPerks\n    } = useContext(PerksContext)\n\n    const [randomizing, setRandomizing] = useState(false)\n    const [failedAddPerkCount, setFailedAddPerkCount] = useState(0)\n\n    const randomize = () => {\n        resetStats()\n        resetPerks()\n        setRandomizing(true)\n    }\n\n    useEffect(() => {\n        if (randomizing) {\n            setLevel(50)\n            if (pointsRemaining() > 0) {\n                const stats = Object.keys(SPECIAL)\n                const stat = stats[Math.floor(Math.random() * stats.length)]\n                increment(stat)\n            }\n            if (perkPointsRemaining() > 0) {\n                const available = availablePerks()\n                    .filter(it => (it.requiredSpecial || 999) <= (SPECIAL as any)[it.special])\n                const perk = available[Math.floor(Math.random() * available.length)]\n                if (perkPointsRemaining() >= (perk.rank - getPerkRank(perk.name))) {\n                    addPerk(perk)\n                } else {\n                    setFailedAddPerkCount(count => count + 1)\n                }\n            }\n            const failed = failedAddPerkCount >= MAX_FAILURES\n            const outOfPoints = pointsRemaining() <= 0 && perkPointsRemaining() <= 0\n            if (failed || outOfPoints) {\n                setRandomizing(false)\n            }\n        }\n    }, [\n        randomizing, SPECIAL, addPerk, availablePerks, getPerkRank, increment, perkPointsRemaining,\n        pointsRemaining, getLevel, setLevel, failedAddPerkCount\n    ])\n\n    return {randomize, randomizing}\n}\n","import {Navbar} from \"react-bootstrap\"\nimport Buttons from \"./Buttons\";\nimport {useMatchMedia} from \"./MatchMedia\";\n\nconst Header = () => {\n    const {gt} = useMatchMedia()\n\n    return (\n        <Navbar bg={\"light\"} style={{marginBottom: 20}}>\n            <Navbar.Brand>\n                <img src={`${process.env.PUBLIC_URL}/img/brand.jpg`} style={{height: 30, width: 30}}\n                     alt={\"Brand\"}/>\n                <span style={{paddingLeft: 10, fontSize: 18, color: \"#777\", fontWeight: 500}}>\n                    Fallout 4 Character Planner\n                </span>\n            </Navbar.Brand>\n            {\n                gt(\"xs\") &&\n                <Buttons/>\n            }\n        </Navbar>\n    )\n}\n\nexport default Header\n","import PerksContext from \"./PerksContext\"\nimport {useContext, useEffect, useState} from \"react\";\nimport {useMatchMedia} from \"./MatchMedia\";\n\ntype PerkStarProps = {\n    filled?: boolean,\n    enabled: boolean,\n    special: string,\n    name: string,\n    rank: number,\n    level: number\n}\n\nconst PerkStar = ({filled = false, enabled, special, name, rank, level}: PerkStarProps) => {\n    const {add, remove, perkPointsRemaining} = useContext(PerksContext)\n    const {mediaSize} = useMatchMedia()\n\n    const [size, setSize] = useState(16)\n    const [addable, setAddable] = useState(false)\n\n    useEffect(() => {\n        if (mediaSize === \"xs\") {\n            setSize(48)\n        } else {\n            setSize(16)\n        }\n    }, [mediaSize])\n\n    const perk = {special, name, rank, level}\n\n    useEffect(() => {\n        setAddable(enabled && perkPointsRemaining() >= rank)\n    }, [enabled, perkPointsRemaining, rank])\n\n    return (\n        filled ?\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"yellow\"\n                width={size}\n                height={size}\n                className=\"bi bi-star-fill\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => remove(perk)}\n                style={{\n                    cursor: \"pointer\",\n                    fontSize: size\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\"/>\n            </svg>\n            :\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill={\"currentColor\"}\n                width={size}\n                height={size}\n                className=\"bi bi-star\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => addable && add(perk)}\n                style={{\n                    opacity: addable ? 1 : 0.3,\n                    cursor: addable ? \"pointer\" : \"cursor\",\n                    fontSize: size\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n                />\n            </svg>\n    )\n}\n\nexport default PerkStar\n","import {Image, OverlayTrigger, Popover} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerksContext from \"./PerksContext\"\nimport PerkStar from \"./PerkStar\"\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\"\nimport {useContext} from \"react\";\nimport {useMatchMedia} from \"./MatchMedia\";\nimport {PerkTreePerk} from \"./Perks\";\n\ntype PerkProps = {\n    special: string,\n    img: string,\n    perk: PerkTreePerk\n}\n\nconst PerkElement = ({special, perk: perkTreePerk}: PerkProps) => {\n    const {getLevel, getRank} = useContext(StatsContext)\n    const {perks, getPerk} = useContext(PerksContext)\n    const {eq} = useMatchMedia()\n    const {img, name, rank: requiredSpecial, ranked} = perkTreePerk\n    const obtainable = getRank(special) >= requiredSpecial\n    const perk = getPerk(name)\n    return (\n        <div style={{\n            paddingTop: 10,\n            opacity: obtainable ? 1 : 0.3,\n            display: \"flex\",\n            justifyContent: \"center\"\n        }}>\n            <OverlayTrigger\n                trigger={[\"hover\", \"focus\"]}\n                placement={\"auto\"}\n                transition={false}\n                overlay={\n                    <Popover id={name}>\n                        <Popover.Title>{name}</Popover.Title>\n                        <Popover.Content>\n                            {\n                                ranked.map(it => {\n                                    const {level, rank, description} = it\n                                    const showLevelRequirement = (perk?.rank ?? 0) < rank\n                                    return (\n                                        <p key={`${name} ${rank}`}>\n                                            Rank {rank}\n                                            {\n                                                showLevelRequirement &&\n                                                <span\n                                                    style={{\n                                                        fontSize: 12,\n                                                        fontWeight: 700,\n                                                        paddingLeft: 4\n                                                    }}\n                                                >\n                                                    {\n\n                                                        level ?\n                                                            `(Requires Level ${level})`\n                                                            :\n                                                            !obtainable && `(Requires ${special} ${requiredSpecial})`\n                                                    }\n                                                </span>\n                                            }: {description}\n                                        </p>\n                                    )\n                                })\n                            }\n                        </Popover.Content>\n                    </Popover>\n                }\n            >\n                {\n                    ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                        <div\n                            ref={ref}\n                            style={{\n                                opacity: obtainable ? 1 : 0.3,\n                                display: \"inline-block\",\n                                justifyContent: \"center\"\n                            }}>\n                            <div {...triggerHandler}>\n                                <Image\n                                    src={`${process.env.PUBLIC_URL}/img/${img}`}\n                                    alt={name}\n                                    style={{\n                                        border: \"0px solid #777\",\n                                        width: eq(\"xs\") ? \"66vw\" : \"100%\",\n                                        height: eq(\"xs\") ? \"66vw\" : \"100%\",\n                                    }}\n                                />\n                            </div>\n                            {\n                                eq(\"xs\") &&\n                                <h4 style={{textAlign: \"center\", paddingTop: 8}}>{name}</h4>\n                            }\n                            <div style={{\n                                display: \"flex\",\n                                justifyContent: \"center\"\n                            }}>\n                                {\n                                    ranked.map(it => <PerkStar\n                                        key={`${name}-${it.rank}`}\n                                        filled={!!perks.find(perk => perk.name === name && perk.rank >= it.rank)}\n                                        enabled={obtainable && getLevel() >= it.level}\n                                        special={special}\n                                        name={name}\n                                        rank={it.rank}\n                                        level={it.level}\n                                    />)\n                                }\n                            </div>\n                        </div>\n                }\n            </OverlayTrigger>\n        </div>\n    )\n}\n\nexport default PerkElement\n","import {Col, Row} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\nimport {PerksData} from \"./Perks\";\n\nconst PerksGrid = () => {\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) => {\n                    return (\n                        <Row style={{padding: 12}}>\n                            {\n                                PerksData.map(\n                                    category => {\n                                        return (\n                                            <Col key={category.special}\n                                                 style={{padding: \"0px 12px\"}}>\n                                                <Row style={{fontWeight: 600}}>\n                                                    {category.special.substring(0, 2)}: {getRank(category.special)}\n                                                </Row>\n                                                {\n                                                    category.perks.map(\n                                                        perk => {\n                                                            return (\n                                                                <PerkElement\n                                                                    key={perk.name}\n                                                                    img={perk.img}\n                                                                    special={category.special}\n                                                                    perk={perk}\n                                                                />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Col>\n                                        )\n                                    }\n                                )\n                            }\n                        </Row>\n                    )\n                }}\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksGrid\n","import PerksContext from \"./PerksContext\"\nimport {useContext, useMemo, useState} from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nconst PerksDetail = () => {\n    const {perks, perkPointsRemaining, perkLevelRequired} = useContext(PerksContext)\n    const [show, setShow] = useState(true)\n    const requiredLevel = useMemo(() => Math.max(perkLevelRequired, 50 - perkPointsRemaining()), [perkLevelRequired, perkPointsRemaining])\n    return (\n        <>\n            <div>\n                <div style={{display: \"flex\", alignItems: \"center\", marginBottom: 10}}>\n                    <h3 style={{marginBottom: 0}}>Perks Added</h3>\n                    {\n                        perks.length > 0 &&\n                        <Button\n                            size={\"sm\"}\n                            onClick={() => setShow(!show)}\n                            style={{\n                                padding: \"1.6px 3px\",\n                                marginLeft: 10,\n                                height: 24,\n                                alignItems: \"center\",\n                                display: \"flex\"\n                            }}\n                        >\n                            {\n                                show ?\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\"\n                                         height=\"16\"\n                                         fill=\"currentColor\" className=\"bi bi-dash\"\n                                         viewBox=\"0 0 16 16\">\n                                        <path\n                                            d=\"M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z\"/>\n                                    </svg>\n                                    :\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\"\n                                         height=\"16\"\n                                         fill=\"currentColor\" className=\"bi bi-plus\"\n                                         viewBox=\"0 0 16 16\">\n                                        <path\n                                            d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"/>\n                                    </svg>\n                            }\n                        </Button>\n                    }\n                </div>\n                <div style={{paddingBottom: 10, color: \"#505050\"}}>\n                    <span>\n                        Requires level: {requiredLevel}\n                    </span>\n                    <span className={\"float-end\"}>\n                        Remaining perk points: {perkPointsRemaining()}\n                    </span>\n                </div>\n            </div>\n            <div>\n                {\n                    show &&\n                    Object.values(\n                        perks.reduce((obj, it) => {\n                            const {name, ranks, rank, level, description} = it\n                            const target = obj[it.name] || {name, ranks, ranked: []}\n                            target.ranked.push({rank, level, description})\n                            obj[it.name] = target\n                            return obj\n                        }, {} as any)\n                    ).map(({name, ranked, ranks}: any) =>\n                        <span key={name}>\n                                <p>{name}: {ranked.length} / {ranks}</p>\n                            {\n                                ranked.map((rank: any) =>\n                                    <p\n                                        key={rank.level}\n                                        style={{\n                                            paddingLeft: 20,\n                                            fontSize: 12\n                                        }}\n                                    >\n                                        {rank.description}\n                                    </p>\n                                )\n                            }\n                            </span>\n                    )\n                }\n            </div>\n        </>\n    )\n}\n\nexport default PerksDetail\n","import {Image} from \"react-bootstrap\";\nimport StatsContext, {StatType} from \"./StatsContext\";\n\nconst Bobbleheads = () =>\n    <StatsContext.Consumer>\n        {({bobbleToggle, hasBobblehead}) =>\n            <div style={{\n                display: \"inline-flex\",\n                justifyContent: \"space-evenly\",\n                width: \"100%\",\n                textAlign: \"center\",\n                paddingTop: 10\n            }}>\n                {Object.keys(StatType).map(name => name as StatType).map(name =>\n                    <span\n                        key={name}\n                        style={{\n                            padding: 10,\n                            opacity: hasBobblehead(name) ? 1 : 0.5,\n                            cursor: \"pointer\"\n                        }}\n                        onClick={() => bobbleToggle(name)}\n                    >\n                            <Image\n                                style={{\n                                    maxHeight: 40,\n                                    maxWidth: 30,\n                                    userSelect: \"none\"\n                                }}\n                                src={`${process.env.PUBLIC_URL}/img/bobblehead.png`}\n                            />\n                            <p style={{userSelect: \"none\"}}>{name.substring(0, 2)}</p>\n                    </span>\n                )}\n            </div>\n        }\n    </StatsContext.Consumer>\n\nexport default Bobbleheads\n","import {Col, Row, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\nimport {useContext, useState} from \"react\";\nimport {PerksData, PerkTreeCategory} from \"./Perks\";\n\nconst PerksTower = () => {\n    const [category, setCategory] = useState<PerkTreeCategory>()\n    const {getRank} = useContext(StatsContext)\n    return (\n        <>\n            <h3>Perks</h3>\n            <Row style={{padding: 12}}>\n                <ToggleButtonGroup type={\"radio\"} name={\"special\"}>\n                    {\n                        PerksData\n                        .map(it =>\n                            <ToggleButton\n                                onClick={() => setCategory(it)}\n                                value={it.special}\n                                variant={category?.special === it.special ? \"primary\" : \"light\"}\n                            >\n                                {it.special.substring(0, 2)}\n                            </ToggleButton>\n                        )\n                    }\n                </ToggleButtonGroup>\n                {\n                    category &&\n                    <Col style={{padding: 12}}>\n                      <Row style={{fontWeight: 600, textAlign: \"center\"}}>\n                        <h3>{category.special}: {getRank(category.special)}</h3>\n                      </Row>\n                        {\n                            category.perks\n                            .map(perk =>\n                                <PerkElement\n                                    key={perk.name}\n                                    img={perk.img}\n                                    special={category.special}\n                                    perk={perk}\n                                />\n                            )\n                        }\n                    </Col>\n                }\n            </Row>\n        </>\n    )\n}\n\nexport default PerksTower\n","import {useContext} from \"react\";\nimport BuildContext from \"./BuildContext\";\n\nconst BuildInfo = () => {\n    const {name} = useContext(BuildContext)\n    return (\n        <h1 style={{marginBottom: 20}}>\n            {\n                name\n                // || <span style={{color: \"grey\", fontStyle: \"italic\"}}>Choose a build name</span>\n            }\n        </h1>\n    )\n}\n\nexport default BuildInfo\n","import \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport {PropsWithChildren, useContext, useEffect, useMemo} from \"react\"\nimport {Col, Container, Row} from \"react-bootstrap\"\n\nimport LZUTF8 from \"lzutf8\";\n\nimport BuildContext, {useBuild} from \"./BuildContext\";\nimport StatsContext, {useStats} from \"./StatsContext\"\nimport PerksContext, {Perk, usePerks} from \"./PerksContext\"\nimport StartingStats from \"./StartingStats\"\nimport Header from \"./Header\"\nimport PerksGrid from \"./PerksGrid\"\nimport PerksDetail from \"./PerksDetail\"\nimport Bobbleheads from \"./Bobbleheads\";\nimport {useMatchMedia} from \"./MatchMedia\";\nimport Buttons from \"./Buttons\";\nimport PerksTower from \"./PerksTower\";\nimport BuildInfo from \"./BuildInfo\";\nimport BuildHistory from \"./BuildHistory\";\n\nconst usePreserveState = () => {\n    const {SPECIAL, getLevel, getBobbleHeads} = useContext(StatsContext)\n    const {perks} = useContext(PerksContext)\n    const {name} = useContext(BuildContext)\n    useEffect(() => {\n        const state = {\n            name,\n            SPECIAL,\n            level: getLevel(),\n            bobbleheads: getBobbleHeads(),\n            perks: perks.map(it => {\n                const {name, rank} = it\n                return {name, rank} as Perk\n            }).reduce((arr, perk) => {\n                const existing = arr.findIndex(it => it.name === perk.name)\n                if (existing >= 0) arr.splice(existing, 1)\n                arr.push(perk)\n                return arr\n            }, [] as Perk[])\n        }\n        window.history.replaceState(null, document.title, `#${LZUTF8.compress(JSON.stringify(state), {outputEncoding: \"Base64\"})}`)\n    }, [name, SPECIAL, perks, getLevel, getBobbleHeads])\n}\n\nconst AppStateListener = ({children}: PropsWithChildren<any>) => {\n    usePreserveState()\n    return (<>{children}</>)\n}\n\nconst BuildContextProvider = ({name, children}: PropsWithChildren<{ name?: string }>) => {\n    const build = useBuild({name})\n    return (\n        <BuildContext.Provider value={useMemo(() => build, [build])}>\n            {children}\n        </BuildContext.Provider>\n    )\n}\n\nconst AppContextProvider = ({children}: PropsWithChildren<any>) => {\n    const {\n        name,\n        SPECIAL,\n        level,\n        perks: perksAdded,\n        bobbleheads,\n    } = JSON.parse(LZUTF8.decompress(window.location.hash.substring(1, window.location.hash.length), {inputEncoding: \"Base64\"}) || \"{}\")\n    const stats = useStats({SPECIAL, level, bobbleheads})\n    const perks = usePerks({level: stats.getLevel(), perksAdded})\n    return (\n        <StatsContext.Provider value={useMemo(() => stats, [stats])}>\n            <PerksContext.Provider value={useMemo(() => perks, [perks])}>\n                <BuildContextProvider name={name}>\n                    <AppStateListener>\n                        {children}\n                    </AppStateListener>\n                </BuildContextProvider>\n            </PerksContext.Provider>\n        </StatsContext.Provider>\n    )\n}\n\nconst App = () => {\n    const {eq, gt} = useMatchMedia()\n    return (\n        <AppContextProvider>\n            <Container fluid>\n                <Header/>\n                {eq(\"xs\") && <div style={{marginBottom: 20}}><Buttons/></div>}\n                <Row>\n                    <Col xl={3}>\n                        <BuildInfo/>\n                        <StartingStats/>\n                        <Bobbleheads/>\n                        <BuildHistory/>\n                        <PerksDetail/>\n                    </Col>\n                    <Col xl={9}>\n                        {\n                            gt(\"xs\") ?\n                                <PerksGrid/>\n                                :\n                                <PerksTower/>\n                        }\n                    </Col>\n                </Row>\n            </Container>\n        </AppContextProvider>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}