{"version":3,"sources":["StatsContext.ts","PerksContext.ts","StartingStats.tsx","Header.tsx","PerkStar.tsx","PerkElement.tsx","PerksGrid.tsx","PerksDetail.tsx","LevelControl.tsx","Bobbleheads.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["StatType","defaultSpecial","Object","keys","reduce","obj","key","StatsContext","React","createContext","SPECIAL","PerksContext","perks","Stat","name","value","Consumer","increment","decrement","pointsRemaining","getRank","hasBobblehead","ListGroupItem","style","userSelect","className","Button","size","padding","onClick","disabled","paddingLeft","paddingRight","minWidth","StartingStats","marginBottom","ListGroup","entries","map","Header","Navbar","bg","Brand","src","height","width","alt","fontSize","color","fontWeight","reset","variant","PerkStar","filled","enabled","special","rank","level","useContext","add","remove","perkPointsRemaining","useState","addable","setAddable","perk","useEffect","xmlns","fill","viewBox","cursor","d","opacity","PerkElement","img","levels","getLevel","paddingTop","OverlayTrigger","trigger","placement","transition","overlay","Popover","id","Title","Content","description","ref","triggerHandler","display","justifyContent","Image","border","find","it","PerksGrid","Row","category","Col","substring","ranked","PerksDetail","ranks","target","push","values","length","LevelControl","setLevel","tooltip","min","max","onChange","changeEvent","parseInt","Bobbleheads","bobbleToggle","textAlign","maxHeight","maxWidth","AppStateListener","children","getBobbleHeads","state","bobbleheads","perksAdded","arr","existing","findIndex","splice","window","history","replaceState","document","title","LZUTF8","compress","JSON","stringify","outputEncoding","usePreserveState","AppContextProvider","parse","decompress","location","hash","inputEncoding","stats","initialLevel","savedBobbleheads","setSpecial","setBobbleheads","changeValue","stat","Math","pointsUsed","a","b","found","useStats","allPerks","flatMap","filter","added","setPerks","local","other","concat","higher","usePerks","Provider","useMemo","App","Container","fluid","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.58323475.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport type SPECIAL = {\n    STRENGTH: number,\n    PERCEPTION: number,\n    ENDURANCE: number,\n    CHARISMA: number,\n    INTELLIGENCE: number,\n    AGILITY: number,\n    LUCK: number\n}\n\nexport type Stats = {\n    SPECIAL: SPECIAL,\n    increment: (stat: string) => void,\n    decrement: (stat: string) => void,\n    reset: () => void,\n    pointsRemaining: () => number,\n    getRank: (stat: string) => number,\n    getLevel: () => number,\n    setLevel: (level: number) => void,\n    getBobbleHeads: () => StatType[],\n    bobbleToggle: (stat: StatType) => void,\n    hasBobblehead: (stat: string) => boolean\n}\n\nexport enum StatType {\n    STRENGTH = \"STRENGTH\", PERCEPTION = \"PERCEPTION\", ENDURANCE = \"ENDURANCE\", CHARISMA = \"CHARISMA\", INTELLIGENCE = \"INTELLIGENCE\", AGILITY = \"AGILITY\", LUCK = \"LUCK\"\n}\n\nconst defaultSpecial = Object.keys(StatType).reduce((obj, key) => {\n    obj[key] = 1\n    return obj\n}, {} as any) as SPECIAL\n\nconst MAX_POINTS = 28\n\nexport const useStats = ({\n                             SPECIAL: special = defaultSpecial,\n                             level: initialLevel = 1,\n                             bobbleheads: savedBobbleheads = []\n                         }: { SPECIAL?: SPECIAL, level?: number, bobbleheads: [] }): Stats => {\n    const [SPECIAL, setSpecial] = useState<SPECIAL>(special)\n    const [level, setLevel] = useState(initialLevel)\n    const [bobbleheads, setBobbleheads] = useState<StatType[]>(savedBobbleheads)\n\n    const changeValue = (stat: string, value: number) => {\n        const target = getRank(stat);\n        setSpecial({\n            ...SPECIAL,\n            [stat]: Math.min(Math.max(target + value, 1), bobbleheads.findIndex(it => it === stat) >= 0 ? 11 : 10)\n        })\n    }\n\n    const increment = (stat: string) => {\n        changeValue(stat, 1)\n    }\n\n    const decrement = (stat: string) => changeValue(stat, -1)\n\n    const pointsRemaining = () => {\n        const pointsUsed = Object.values(SPECIAL).reduce((a, b) => a + Math.min(b, 11), 0) - bobbleheads.length\n        return Math.max(0, MAX_POINTS - pointsUsed)\n    }\n\n    const getRank = (stat: string): number => (SPECIAL as any)[stat]\n\n    const reset = () => {\n        setLevel(0)\n        setSpecial(defaultSpecial)\n        setBobbleheads([])\n    }\n\n    const bobbleToggle = (stat: StatType) => {\n        const found = bobbleheads.findIndex(it => it === stat)\n        if (found < 0) {\n            bobbleheads.push(stat)\n            increment(stat)\n        } else {\n            bobbleheads.splice(found, 1)\n            decrement(stat)\n        }\n        setBobbleheads([...bobbleheads])\n    }\n\n    return {\n        SPECIAL,\n        increment,\n        decrement,\n        reset,\n        pointsRemaining,\n        getRank,\n        getLevel: () => level,\n        setLevel: (level: number) => setLevel(Math.min(level, 50)),\n        getBobbleHeads: () => bobbleheads,\n        bobbleToggle,\n        hasBobblehead: (stat: string) => !!bobbleheads.find(it => it === stat)\n    } as Stats;\n}\n\nconst StatsContext = React.createContext<Stats>({SPECIAL: defaultSpecial} as Stats)\n\nexport default StatsContext\n","import React, {useEffect, useState} from \"react\";\n\nimport allPerks from \"./perks.json\"\n\nexport type Perk = {\n    special: string,\n    name: string,\n    rank: number,\n    level: number,\n    description?: string,\n    ranks?: number\n}\n\nexport type Perks = {\n    perks: Perk[],\n    add: (perk: Perk) => void,\n    remove: (perk: Perk) => void,\n    perkPointsRemaining: () => number\n}\n\nexport const usePerks = ({\n                             level,\n                             perksAdded = []\n                         }: { level: number, perksAdded?: Perk[] }): Perks => {\n    const [perks, setPerks] = useState<Array<Perk>>(\n        allPerks\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {special, name, level, rank, description, ranks: ranked.length}\n            })\n        })\n        .filter(it => perksAdded.find(added => it.name === added.name && it.rank <= added.rank))\n    )\n\n    const add = (perk: Perk) => {\n        const local = allPerks\n        .find(it => it.special === perk.special)\n        ?.perks\n        .find(it => it.name === perk.name)\n        const add = local\n        ?.ranked\n        .map(it => ({...it, name: local.name, ranks: local.ranks}))\n        .filter(it => it.rank <= perk.rank)\n        .map(it => ({...it, special: perk.special} as Perk)) as Perk[]\n        const other = perks.filter(it => it.name !== perk.name)\n        setPerks([...other].concat(add))\n    }\n\n    const remove = (perk: Perk) => {\n        const existing = perks.filter(it => it.name === perk.name)\n        const other = perks.filter(it => it.name !== perk.name)\n        const higher = existing.find(it => it.rank > perk.rank)\n        const add = existing.filter(it => higher ? it.rank <= perk.rank : it.rank < perk.rank)\n        setPerks([...other, ...add])\n    }\n\n    useEffect(() => {\n        setPerks(perks => perks.filter(it => it.level < level))\n    }, [level])\n\n    return {\n        perks,\n        add,\n        remove,\n        perkPointsRemaining: () => {\n            return level - 1 - perks.length\n        }\n    } as Perks\n}\n\nconst PerksContext = React.createContext<Perks>({perks: [] as Perk[]} as Perks)\n\nexport default PerksContext\n","import StatsContext, {Stats} from \"./StatsContext\"\nimport {Button, ListGroup, ListGroupItem} from \"react-bootstrap\"\n\nconst StartingStats = () => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({SPECIAL, pointsRemaining}: Stats) => {\n                    return (\n                        <>\n                            <div style={{padding: 2, marginBottom: 10}}>\n                                <h3>S.P.E.C.I.A.L</h3>\n                                <span>{pointsRemaining()} points left to spend</span>\n                            </div>\n                            <ListGroup>\n                                {\n                                    Object.entries(SPECIAL)\n                                    .map(\n                                        ([name, value]) => <Stat key={name} name={name}\n                                                                 value={value}/>\n                                    )\n                                }\n                            </ListGroup>\n                        </>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype StatProps = {\n    name: string,\n    value: number\n}\n\nconst Stat = ({name, value}: StatProps) =>\n    <StatsContext.Consumer>\n        {({increment, decrement, pointsRemaining, getRank, hasBobblehead}: Stats) =>\n            <ListGroupItem>\n                <span style={{userSelect: \"none\"}}>\n                    {name}:\n                </span>\n                <span className={\"float-end\"}>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => decrement(name)}\n                                    disabled={value <= (hasBobblehead(name) ? 2 : 1)}\n                            >\n                                -\n                            </Button>\n                            <span\n                                style={{\n                                    paddingLeft: 10,\n                                    paddingRight: 10,\n                                    minWidth: 40,\n                                    userSelect: \"none\"\n                                }}\n                            >\n                                {value}\n                            </span>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => increment(name)}\n                                    disabled={getRank(name) >= (hasBobblehead(name) ? 11 : 10) || pointsRemaining() <= 0}\n                            >\n                                +\n                            </Button>\n                        </span>\n            </ListGroupItem>\n        }\n    </StatsContext.Consumer>\n\nexport default StartingStats\n","import {Button, Navbar} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\n\nconst Header = () => {\n    return (\n        <Navbar bg={\"light\"} style={{marginBottom: 20}}>\n            <Navbar.Brand>\n                <img src={\"img/brand.jpg\"} style={{height: 30, width: 30}} alt={\"Brand\"}/>\n                <span style={{paddingLeft: 10, fontSize: 18, color: \"#777\", fontWeight: 500}}>\n                    Fallout 4 Character Planner\n                </span>\n            </Navbar.Brand>\n            <StatsContext.Consumer>\n                {({reset}) =>\n                    <Button style={{fontSize: 14}} variant={\"danger\"} onClick={() => reset()}>\n                        Reset\n                    </Button>\n                }\n            </StatsContext.Consumer>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import PerksContext, {Perks} from \"./PerksContext\"\nimport {useContext, useEffect, useState} from \"react\";\n\n\ntype PerkStarProps = {\n    filled?: boolean,\n    enabled: boolean,\n    special: string,\n    name: string,\n    rank: number,\n    level: number\n}\n\nconst PerkStar = ({filled = false, enabled, special, name, rank, level}: PerkStarProps) => {\n    const {add, remove, perkPointsRemaining} = useContext(PerksContext)\n\n    const [addable, setAddable] = useState(false)\n\n    const perk = {special, name, rank, level}\n\n    useEffect(() => {\n        setAddable(enabled && perkPointsRemaining() >= rank)\n    }, [enabled, perkPointsRemaining])\n\n    return (\n        filled ?\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                fill=\"yellow\"\n                className=\"bi bi-star-fill\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => remove(perk)}\n                style={{\n                    cursor: \"pointer\"\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\"/>\n            </svg>\n            :\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                fill={\"currentColor\"}\n                className=\"bi bi-star\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => addable && add(perk)}\n                style={{\n                    opacity: addable ? 1 : 0.3,\n                    cursor: addable ? \"pointer\" : \"cursor\"\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n                />\n            </svg>\n    )\n}\n\nexport default PerkStar\n","import {Image, OverlayTrigger, Popover} from \"react-bootstrap\"\nimport StatsContext, {Stats} from \"./StatsContext\"\nimport PerksContext, {Perks} from \"./PerksContext\"\nimport PerkStar from \"./PerkStar\"\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\"\n\ntype PerkProps = {\n    special: string,\n    img: string,\n    name: string,\n    rank: number,\n    levels: any[]\n}\n\nconst PerkElement = ({special, img, name, rank, levels}: PerkProps) =>\n    <StatsContext.Consumer>\n        {({getRank, getLevel}: Stats) =>\n            <PerksContext.Consumer>\n                {({perks, perkPointsRemaining}: Perks) =>\n                    <div style={{paddingTop: 10}}>\n                        <OverlayTrigger\n                            trigger={[\"hover\", \"focus\"]}\n                            placement={\"auto\"}\n                            transition={false}\n                            overlay={\n                                <Popover id={name}>\n                                    <Popover.Title>{name}</Popover.Title>\n                                    <Popover.Content>\n                                        {\n                                            levels.map(level => {\n                                                return (\n                                                    <p key={`${level.name} ${level.rank}`}>\n                                                        Rank {level.rank}\n                                                        {\n                                                            level.level > getLevel() &&\n                                                            <span style={{\n                                                                fontSize: 12,\n                                                                fontWeight: 700,\n                                                                paddingLeft: 4\n                                                            }}>\n                                                              (Requires Level {level.level})\n                                                            </span>\n                                                        }: {level.description}\n                                                    </p>\n                                                )\n                                            })\n                                        }\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            {\n                                ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                                    <div\n                                        ref={ref}\n                                        style={{\n                                            opacity: getRank(special) >= rank ? 1 : 0.3,\n                                            display: \"inline-block\",\n                                            justifyContent: \"center\"\n                                        }}>\n                                        <div {...triggerHandler}>\n                                            <Image\n                                                src={`img/${img}`}\n                                                alt={name}\n                                                style={{\n                                                    border: \"0px solid #777\"\n                                                }}\n                                            />\n                                        </div>\n                                        <div style={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\"\n                                        }}>\n                                            {\n                                                levels.map(level => <PerkStar\n                                                    key={`${name}-${level.rank}`}\n                                                    filled={!!perks.find(it => it.name === name && it.rank >= level.rank)}\n                                                    enabled={getRank(special) >= rank && getLevel() >= level.level}\n                                                    special={special}\n                                                    name={name}\n                                                    rank={level.rank}\n                                                    level={level.level}\n                                                />)\n                                            }\n                                        </div>\n                                    </div>\n                            }\n                        </OverlayTrigger>\n                    </div>\n                }\n            </PerksContext.Consumer>\n        }\n    </StatsContext.Consumer>\n\nexport default PerkElement\n","import perks from \"./perks.json\"\nimport {Col, Row} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\n\nconst PerksGrid = () => {\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) => {\n                    return (\n                        <Row style={{padding: 12}}>\n                            {\n                                perks.map(\n                                    category => {\n                                        return (\n                                            <Col key={category.special} style={{padding: \"0px 8px\"}}>\n                                                <Row style={{fontWeight: 600}}>\n                                                    {category.special.substring(0, 2)}: {getRank(category.special)}\n                                                </Row>\n                                                {\n                                                    category.perks.map(\n                                                        perk => {\n                                                            return (\n                                                                <PerkElement\n                                                                    key={perk.name}\n                                                                    special={category.special}\n                                                                    img={perk.img}\n                                                                    name={perk.name}\n                                                                    rank={perk.rank}\n                                                                    levels={perk.ranked}\n                                                                />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Col>\n                                        )\n                                    }\n                                )\n                            }\n                        </Row>\n                    )\n                }}\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksGrid\n","import PerksContext, {Perks} from \"./PerksContext\"\n\nconst PerksDetail = () => {\n    return (\n        <PerksContext.Consumer>\n            {\n                ({perks}: Perks) => {\n                    const map = perks\n                    .reduce((obj, it) => {\n                        const {name, ranks, rank, level, description} = it\n                        const target = obj[it.name] || {name, ranks, ranked: []}\n                        target.ranked.push({rank, level, description})\n                        obj[it.name] = target\n                        return obj\n                    }, {} as any)\n                    return Object.values(map).map(({name, ranked, ranks}: any) =>\n                        <span key={name}>\n                            <p>{name}: {ranked.length} / {ranks}</p>\n                            {\n                                ranked.map((rank: any) =>\n                                    <p\n                                        key={rank.level}\n                                        style={{\n                                            paddingLeft: 20,\n                                            fontSize: 12\n                                        }}\n                                    >\n                                        {rank.description}\n                                    </p>\n                                )\n                            }\n                        </span>\n                    )\n                }\n            }\n        </PerksContext.Consumer>\n    )\n}\n\nexport default PerksDetail\n","import RangeSlider from \"react-bootstrap-range-slider\";\nimport {useContext} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\n\nconst LevelControl = () => {\n    const {getLevel, pointsRemaining, setLevel} = useContext(StatsContext)\n    const {perkPointsRemaining} = useContext(PerksContext)\n    return (\n        <div style={{paddingTop: 10}}>\n            Level: {getLevel()}\n            <div\n                style={{width: \"100%\"}}\n            >\n                <RangeSlider\n                    disabled={pointsRemaining() > 0}\n                    size={\"lg\"}\n                    value={getLevel()}\n                    tooltip={\"off\"}\n                    min={1}\n                    max={50}\n                    onChange={changeEvent => {\n                        const level = parseInt(changeEvent.target.value)\n                        setLevel(level)\n                    }}\n                />\n                {\n                    getLevel() > 1 &&\n                    perkPointsRemaining() >= 0\n                        ?\n                        <p>\n                            Remaining perk\n                            points: {perkPointsRemaining()}\n                        </p>\n                        :\n                        <p>Requires level: {getLevel() - perkPointsRemaining()}</p>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default LevelControl\n","import {Image} from \"react-bootstrap\";\nimport StatsContext, {StatType} from \"./StatsContext\";\n\nconst Bobbleheads = () =>\n    <StatsContext.Consumer>\n        {({bobbleToggle, hasBobblehead}) =>\n            <div style={{\n                display: \"inline-flex\",\n                justifyContent: \"space-evenly\",\n                width: \"100%\",\n                textAlign: \"center\",\n                paddingTop: 10\n            }}>\n                {Object.keys(StatType).map(name => name as StatType).map(name =>\n                    <span\n                        key={name}\n                        style={{\n                            padding: 10,\n                            opacity: hasBobblehead(name) ? 1 : 0.5,\n                            cursor: \"pointer\"\n                        }}\n                        onClick={() => bobbleToggle(name)}\n                    >\n                            <Image\n                                style={{\n                                    maxHeight: 40,\n                                    maxWidth: 30,\n                                    userSelect: \"none\"\n                                }}\n                                src={\"img/bobblehead.png\"}\n                            />\n                            <p style={{userSelect: \"none\"}}>{name.substring(0, 2)}</p>\n                    </span>\n                )}\n            </div>\n        }\n    </StatsContext.Consumer>\n\nexport default Bobbleheads\n","import \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport {PropsWithChildren, useContext, useEffect, useMemo} from \"react\"\nimport {Col, Container, Row} from \"react-bootstrap\"\n\nimport LZUTF8 from \"lzutf8\";\n\nimport StatsContext, {useStats} from \"./StatsContext\"\nimport PerksContext, {Perk, usePerks} from \"./PerksContext\"\nimport StartingStats from \"./StartingStats\"\nimport Header from \"./Header\"\nimport PerksGrid from \"./PerksGrid\"\nimport PerksDetail from \"./PerksDetail\"\nimport LevelControl from \"./LevelControl\";\nimport Bobbleheads from \"./Bobbleheads\";\n\nconst usePreserveState = () => {\n    const {SPECIAL, getLevel, getBobbleHeads} = useContext(StatsContext)\n    const {perks} = useContext(PerksContext)\n    useEffect(() => {\n        const state = {\n            SPECIAL: SPECIAL,\n            level: getLevel(),\n            bobbleheads: getBobbleHeads(),\n            perksAdded: perks.map(it => {\n                const {name, rank} = it\n                return {name, rank} as Perk\n            })\n            .reduce((arr, perk) => {\n                const existing = arr.findIndex(it => it.name === perk.name)\n                if (existing >= 0) arr.splice(existing, 1)\n                arr.push(perk)\n                return arr\n            }, [] as Perk[])\n        }\n        window.history.replaceState(null, document.title, `#${LZUTF8.compress(JSON.stringify(state), {outputEncoding: \"Base64\"})}`)\n    }, [SPECIAL, perks, getLevel])\n}\n\nconst AppStateListener = ({children}: PropsWithChildren<any>) => {\n    usePreserveState()\n    return (<>{children}</>)\n}\n\nconst AppContextProvider = ({children}: PropsWithChildren<any>) => {\n    const {\n        SPECIAL,\n        level,\n        perksAdded,\n        bobbleheads\n    } = JSON.parse(LZUTF8.decompress(window.location.hash.substring(1, window.location.hash.length), {inputEncoding: \"Base64\"}) || \"{}\")\n    const stats = useStats({SPECIAL, level, bobbleheads})\n    const perks = usePerks({level: stats.getLevel(), perksAdded})\n    return (\n        <StatsContext.Provider value={stats}>\n            <PerksContext.Provider value={useMemo(() => perks, [perks])}>\n                <AppStateListener>\n                    {children}\n                </AppStateListener>\n            </PerksContext.Provider>\n        </StatsContext.Provider>\n    )\n}\n\nconst App = () => {\n    return (\n        <AppContextProvider>\n            <Container fluid>\n                <Header/>\n                <Row>\n                    <Col xl={3}>\n                        <StartingStats/>\n                        <Bobbleheads/>\n                        <LevelControl/>\n                        <PerksDetail/>\n                    </Col>\n                    <Col xl={9}>\n                        <PerksGrid/>\n                    </Col>\n                </Row>\n            </Container>\n        </AppContextProvider>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}