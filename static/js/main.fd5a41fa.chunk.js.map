{"version":3,"sources":["StatsContext.ts","PerksContext.ts","StartingStats.tsx","Header.tsx","PerkStar.tsx","PerkElement.tsx","PerksGrid.tsx","PerksDetail.tsx","LevelControl.tsx","Bobbleheads.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["StatType","defaultSpecial","Object","keys","reduce","obj","key","StatsContext","React","createContext","SPECIAL","PerksContext","perks","Stat","name","value","Consumer","increment","decrement","pointsRemaining","getRank","hasBobblehead","ListGroupItem","style","userSelect","className","Button","size","padding","onClick","disabled","paddingLeft","paddingRight","minWidth","StartingStats","marginBottom","ListGroup","entries","map","Header","Navbar","bg","Brand","src","height","width","alt","fontSize","color","fontWeight","reset","variant","PerkStar","filled","enabled","perk","special","rank","level","add","remove","xmlns","fill","viewBox","opacity","cursor","d","PerkElement","img","levels","getLevel","perkPointsRemaining","paddingTop","OverlayTrigger","trigger","placement","transition","overlay","Popover","id","Title","Content","description","ref","triggerHandler","display","justifyContent","Image","border","find","it","PerksGrid","Row","category","Col","substring","ranked","PerksDetail","ranks","target","push","values","length","LevelControl","useContext","setLevel","tooltip","min","max","onChange","changeEvent","parseInt","Bobbleheads","bobbleToggle","textAlign","maxHeight","maxWidth","AppStateListener","children","useEffect","state","perksAdded","arr","existing","findIndex","splice","window","history","replaceState","document","title","LZUTF8","compress","JSON","stringify","outputEncoding","usePreserveState","AppContextProvider","parse","decompress","location","hash","inputEncoding","stats","initialLevel","useState","setSpecial","bobbleheads","setBobbleheads","changeValue","stat","Math","a","b","getBobbleHeads","found","useStats","allPerks","flatMap","filter","added","setPerks","local","other","concat","higher","usePerks","Provider","useMemo","App","Container","fluid","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fd5a41fa.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport type SPECIAL = {\n    STRENGTH: number,\n    PERCEPTION: number,\n    ENDURANCE: number,\n    CHARISMA: number,\n    INTELLIGENCE: number,\n    AGILITY: number,\n    LUCK: number\n}\n\nexport type Stats = {\n    SPECIAL: SPECIAL,\n    increment: (stat: string) => void,\n    decrement: (stat: string) => void,\n    reset: () => void,\n    pointsRemaining: () => number,\n    getRank: (stat: string) => number,\n    getLevel: () => number,\n    setLevel: (level: number) => void,\n    getBobbleHeads: () => StatType[],\n    bobbleToggle: (stat: StatType) => void,\n    hasBobblehead: (stat: string) => boolean\n}\n\nexport enum StatType {\n    STRENGTH = \"STRENGTH\", PERCEPTION = \"PERCEPTION\", ENDURANCE = \"ENDURANCE\", CHARISMA = \"CHARISMA\", INTELLIGENCE = \"INTELLIGENCE\", AGILITY = \"AGILITY\", LUCK = \"LUCK\"\n}\n\nconst defaultSpecial = Object.keys(StatType).reduce((obj, key) => {\n    obj[key] = 1\n    return obj\n}, {} as any) as SPECIAL\n\nconst MAX_POINTS = 28\n\nexport const useStats = ({\n                             SPECIAL: special = defaultSpecial,\n                             level: initialLevel = 1\n                         }: { SPECIAL?: SPECIAL, level?: number }): Stats => {\n    const [SPECIAL, setSpecial] = useState<SPECIAL>(special)\n    const [level, setLevel] = useState(initialLevel)\n    const [bobbleheads, setBobbleheads] = useState<StatType[]>([])\n\n    const changeValue = (stat: string, value: number) => {\n        const target = getRank(stat);\n        setSpecial({\n            ...SPECIAL,\n            [stat]: Math.min(Math.max(target + value, 1), bobbleheads.findIndex(it => it === stat) >= 0 ? 11 : 10)\n        })\n    }\n\n    const increment = (stat: string) => {\n        changeValue(stat, 1)\n    }\n\n    const decrement = (stat: string) => changeValue(stat, -1)\n\n    const pointsRemaining = () => {\n        const pointsUsed = Object.values(SPECIAL).reduce((a, b) => a + Math.min(b, 10), 0) - bobbleheads.length\n        return MAX_POINTS - pointsUsed\n    }\n\n    const getRank = (stat: string): number => (SPECIAL as any)[stat]\n\n    const reset = () => {\n        setLevel(0)\n        setSpecial(defaultSpecial)\n        setBobbleheads([])\n    }\n\n    const bobbleToggle = (stat: StatType) => {\n        const found = bobbleheads.findIndex(it => it === stat)\n        if (found < 0) {\n            bobbleheads.push(stat)\n            increment(stat)\n        } else {\n            bobbleheads.splice(found, 1)\n            decrement(stat)\n        }\n        setBobbleheads([...bobbleheads])\n    }\n\n    return {\n        SPECIAL,\n        increment,\n        decrement,\n        reset,\n        pointsRemaining,\n        getRank,\n        getLevel: () => level,\n        setLevel: (level: number) => setLevel(Math.min(level, 50)),\n        getBobbleHeads: () => bobbleheads,\n        bobbleToggle,\n        hasBobblehead: (stat: string) => !!bobbleheads.find(it => it === stat)\n    } as Stats;\n}\n\nconst StatsContext = React.createContext<Stats>({SPECIAL: defaultSpecial} as Stats)\n\nexport default StatsContext\n","import React, {useEffect, useState} from \"react\";\n\nimport allPerks from \"./perks.json\"\n\nexport type Perk = {\n    special: string,\n    name: string,\n    rank: number,\n    level: number,\n    description?: string,\n    ranks?: number\n}\n\nexport type Perks = {\n    perks: Perk[],\n    add: (perk: Perk) => void,\n    remove: (perk: Perk) => void,\n    perkPointsRemaining: () => number\n}\n\nexport const usePerks = ({\n                             level,\n                             perksAdded = []\n                         }: { level: number, perksAdded?: Perk[] }): Perks => {\n    const [perks, setPerks] = useState<Array<Perk>>(\n        allPerks\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {special, name, level, rank, description, ranks: ranked.length}\n            })\n        })\n        .filter(it => perksAdded.find(added => it.name === added.name && it.rank <= added.rank))\n    )\n\n    const add = (perk: Perk) => {\n        const local = allPerks\n        .find(it => it.special === perk.special)\n        ?.perks\n        .find(it => it.name === perk.name)\n        const add = local\n        ?.ranked\n        .map(it => ({...it, name: local.name, ranks: local.ranks}))\n        .filter(it => it.rank <= perk.rank)\n        .map(it => ({...it, special: perk.special} as Perk)) as Perk[]\n        const other = perks.filter(it => it.name !== perk.name)\n        setPerks([...other].concat(add))\n    }\n\n    const remove = (perk: Perk) => {\n        const existing = perks.filter(it => it.name === perk.name)\n        const other = perks.filter(it => it.name !== perk.name)\n        const higher = existing.find(it => it.rank > perk.rank)\n        const add = existing.filter(it => higher ? it.rank <= perk.rank : it.rank < perk.rank)\n        setPerks([...other, ...add])\n    }\n\n    useEffect(() => {\n        setPerks(perks => perks.filter(it => it.level < level))\n    }, [level])\n\n    return {\n        perks,\n        add,\n        remove,\n        perkPointsRemaining: () => {\n            return level - 1 - perks.length\n        }\n    } as Perks\n}\n\nconst PerksContext = React.createContext<Perks>({perks: [] as Perk[]} as Perks)\n\nexport default PerksContext\n","import StatsContext, {Stats} from \"./StatsContext\"\nimport {Button, ListGroup, ListGroupItem} from \"react-bootstrap\"\n\nconst StartingStats = () => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({SPECIAL, pointsRemaining}: Stats) => {\n                    return (\n                        <>\n                            <div style={{padding: 2, marginBottom: 10}}>\n                                <h3>S.P.E.C.I.A.L</h3>\n                                <span>{pointsRemaining()} points left to spend</span>\n                            </div>\n                            <ListGroup>\n                                {\n                                    Object.entries(SPECIAL)\n                                    .map(\n                                        ([name, value]) => <Stat key={name} name={name}\n                                                                 value={value}/>\n                                    )\n                                }\n                            </ListGroup>\n                        </>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype StatProps = {\n    name: string,\n    value: number\n}\n\nconst Stat = ({name, value}: StatProps) => {\n\n    return (\n        <StatsContext.Consumer>\n            {\n                ({increment, decrement, pointsRemaining, getRank, hasBobblehead}: Stats) =>\n                    <ListGroupItem>\n                        <span style={{userSelect: \"none\"}}>\n                            {name}:\n                        </span>\n                        <span className={\"float-end\"}>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => decrement(name)}\n                                    disabled={value <= 1}\n                            >\n                                -\n                            </Button>\n                            <span\n                                style={{\n                                    paddingLeft: 10,\n                                    paddingRight: 10,\n                                    minWidth: 40,\n                                    userSelect: \"none\"\n                                }}\n                            >\n                                {value}\n                            </span>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => increment(name)}\n                                    disabled={getRank(name) >= (hasBobblehead(name) ? 11 : 10) || pointsRemaining() <= 0}\n                            >\n                                +\n                            </Button>\n                        </span>\n                    </ListGroupItem>\n            }\n        </StatsContext.Consumer>\n    )\n}\n\nexport default StartingStats\n","import {Button, Navbar} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\n\nconst Header = () => {\n    return (\n        <Navbar bg={\"light\"} style={{marginBottom: 20}}>\n            <Navbar.Brand>\n                <img src={\"img/brand.jpg\"} style={{height: 30, width: 30}} alt={\"Brand\"}/>\n                <span style={{paddingLeft: 10, fontSize: 18, color: \"#777\", fontWeight: 500}}>\n                    Fallout 4 Character Planner\n                </span>\n            </Navbar.Brand>\n            <StatsContext.Consumer>\n                {({reset}) =>\n                    <Button style={{fontSize: 14}} variant={\"danger\"} onClick={() => reset()}>\n                        Reset\n                    </Button>\n                }\n            </StatsContext.Consumer>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import PerksContext, {Perks} from \"./PerksContext\"\n\n\ntype PerkStarProps = {\n    filled?: boolean,\n    enabled: boolean,\n    special: string,\n    name: string,\n    rank: number,\n    level: number\n}\n\nconst PerkStar = ({filled = false, enabled, special, name, rank, level}: PerkStarProps) => {\n    const perk = {special, name, rank, level}\n    return (\n        <PerksContext.Consumer>\n            {\n                ({add, remove}: Perks) => {\n                    return (\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"16\"\n                            height=\"16\"\n                            fill={filled ? \"yellow\" : \"currentColor\"}\n                            className=\"bi bi-star\"\n                            viewBox=\"0 0 16 16\"\n                            onClick={() => enabled && (filled ? remove(perk) : add(perk))}\n                            style={{\n                                opacity: enabled ? 1 : 0.3,\n                                cursor: enabled ? \"pointer\" : \"cursor\"\n                            }}\n                        >\n                            <path\n                                // style={{fill: \"yellow\"}}\n                                // fill={\"yellow\"}\n                                className={\"icon\"}\n                                d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n                            />\n                        </svg>\n                    )\n                }\n            }\n        </PerksContext.Consumer>\n    )\n}\n\nexport default PerkStar\n","import {Image, OverlayTrigger, Popover} from \"react-bootstrap\"\nimport StatsContext, {Stats} from \"./StatsContext\"\nimport PerksContext, {Perks} from \"./PerksContext\"\nimport PerkStar from \"./PerkStar\"\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\"\n\ntype PerkProps = {\n    special: string,\n    img: string,\n    name: string,\n    rank: number,\n    levels: any[]\n}\n\nconst PerkElement = ({special, img, name, rank, levels}: PerkProps) => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({getRank, getLevel}: Stats) => {\n                    return (\n                        <PerksContext.Consumer>\n                            {\n                                ({perks, perkPointsRemaining}: Perks) => {\n                                    return (\n                                        <div style={{paddingTop: 10}}>\n                                            <OverlayTrigger\n                                                trigger={[\"hover\", \"focus\"]}\n                                                placement={\"auto\"}\n                                                transition={false}\n                                                overlay={\n                                                    <Popover id={name}>\n                                                        <Popover.Title>{name}</Popover.Title>\n                                                        <Popover.Content>\n                                                            {\n                                                                levels.map(level => {\n                                                                    return (\n                                                                        <p key={`${level.name} ${level.rank}`}>\n                                                                            Rank {level.rank}\n                                                                            {\n                                                                                level.level > getLevel() &&\n                                                                                <span style={{\n                                                                                    fontSize: 12,\n                                                                                    fontWeight: 700,\n                                                                                    paddingLeft: 4\n                                                                                }}>\n                                                                                  (Requires Level {level.level})\n                                                                                </span>\n                                                                            }: {level.description}\n                                                                        </p>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </Popover.Content>\n                                                    </Popover>\n                                                }\n                                            >\n                                                {\n                                                    ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                                                        <div\n                                                            ref={ref}\n                                                            style={{\n                                                                opacity: getRank(special) >= rank ? 1 : 0.3,\n                                                                display: \"inline-block\",\n                                                                justifyContent: \"center\"\n                                                            }}>\n                                                            <div {...triggerHandler}>\n                                                                <Image\n                                                                    src={`img/${img}`}\n                                                                    alt={name}\n                                                                    style={{\n                                                                        border: \"0px solid #777\"\n                                                                    }}\n                                                                />\n                                                            </div>\n                                                            <div style={{\n                                                                display: \"flex\",\n                                                                justifyContent: \"center\"\n                                                            }}>\n                                                                {\n                                                                    levels.map(level => <PerkStar\n                                                                        key={`${name}-${level.rank}`}\n                                                                        filled={!!perks.find(it => it.name === name && it.rank >= level.rank)}\n                                                                        enabled={getRank(special) >= rank && getLevel() >= level.level && perkPointsRemaining() > 0}\n                                                                        special={special}\n                                                                        name={name}\n                                                                        rank={level.rank}\n                                                                        level={level.level}\n                                                                    />)\n                                                                }\n                                                            </div>\n                                                        </div>\n                                                }\n                                            </OverlayTrigger>\n                                        </div>\n                                    )\n                                }\n                            }\n                        </PerksContext.Consumer>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\nexport default PerkElement\n","import perks from \"./perks.json\"\nimport {Col, Row} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\n\nconst PerksGrid = () => {\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) => {\n                    return (\n                        <Row style={{padding: 12}}>\n                            {\n                                perks.map(\n                                    category => {\n                                        return (\n                                            <Col key={category.special} style={{padding: \"0px 8px\"}}>\n                                                <Row style={{fontWeight: 600}}>\n                                                    {category.special.substring(0, 2)}: {getRank(category.special)}\n                                                </Row>\n                                                {\n                                                    category.perks.map(\n                                                        perk => {\n                                                            return (\n                                                                <PerkElement\n                                                                    key={perk.name}\n                                                                    special={category.special}\n                                                                    img={perk.img}\n                                                                    name={perk.name}\n                                                                    rank={perk.rank}\n                                                                    levels={perk.ranked}\n                                                                />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Col>\n                                        )\n                                    }\n                                )\n                            }\n                        </Row>\n                    )\n                }}\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksGrid\n","import PerksContext, {Perks} from \"./PerksContext\"\n\nconst PerksDetail = () => {\n    return (\n        <PerksContext.Consumer>\n            {\n                ({perks}: Perks) => {\n                    const map = perks\n                    .reduce((obj, it) => {\n                        const {name, ranks, rank, level, description} = it\n                        const target = obj[it.name] || {name, ranks, ranked: []}\n                        target.ranked.push({rank, level, description})\n                        obj[it.name] = target\n                        return obj\n                    }, {} as any)\n                    return Object.values(map).map(({name, ranked, ranks}: any) =>\n                        <span key={name}>\n                            <p>{name}: {ranked.length} / {ranks}</p>\n                            {\n                                ranked.map((rank: any) =>\n                                    <p\n                                        key={rank.level}\n                                        style={{\n                                            paddingLeft: 20,\n                                            fontSize: 12\n                                        }}\n                                    >\n                                        {rank.description}\n                                    </p>\n                                )\n                            }\n                        </span>\n                    )\n                }\n            }\n        </PerksContext.Consumer>\n    )\n}\n\nexport default PerksDetail\n","import RangeSlider from \"react-bootstrap-range-slider\";\nimport {useContext} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\n\nconst LevelControl = () => {\n    const {getLevel, pointsRemaining, setLevel} = useContext(StatsContext)\n    const {perkPointsRemaining} = useContext(PerksContext)\n    return (\n        <div style={{paddingTop: 10}}>\n            Level: {getLevel()}\n            <div\n                style={{width: \"100%\"}}\n            >\n                <RangeSlider\n                    disabled={pointsRemaining() > 0}\n                    size={\"lg\"}\n                    value={getLevel()}\n                    tooltip={\"off\"}\n                    min={1}\n                    max={50}\n                    onChange={changeEvent => {\n                        const level = parseInt(changeEvent.target.value)\n                        setLevel(level)\n                    }}\n                />\n                {\n                    getLevel() > 1 &&\n                    perkPointsRemaining() >= 0\n                        ?\n                        <p>\n                            Remaining perk\n                            points: {perkPointsRemaining()}\n                        </p>\n                        :\n                        <p>Requires level: {getLevel() - perkPointsRemaining()}</p>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default LevelControl\n","import {Image} from \"react-bootstrap\";\nimport StatsContext, {StatType} from \"./StatsContext\";\n\nconst Bobbleheads = () =>\n    <StatsContext.Consumer>\n        {({bobbleToggle, hasBobblehead}) =>\n            <div style={{\n                display: \"inline-flex\",\n                justifyContent: \"space-evenly\",\n                width: \"100%\",\n                textAlign: \"center\",\n                paddingTop: 10\n            }}>\n                {Object.keys(StatType).map(name => name as StatType).map(name =>\n                    <span\n                        key={name}\n                        style={{\n                            padding: 10,\n                            opacity: hasBobblehead(name) ? 1 : 0.5,\n                            cursor: \"pointer\"\n                        }}\n                        onClick={() => bobbleToggle(name)}\n                    >\n                            <Image\n                                style={{\n                                    maxHeight: 40,\n                                    maxWidth: 30,\n                                    userSelect: \"none\"\n                                }}\n                                src={\"img/bobblehead.png\"}\n                            />\n                            <p style={{userSelect: \"none\"}}>{name.substring(0, 2)}</p>\n                    </span>\n                )}\n            </div>\n        }\n    </StatsContext.Consumer>\n\nexport default Bobbleheads\n","import \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport {PropsWithChildren, useContext, useEffect, useMemo} from \"react\"\nimport {Col, Container, Row} from \"react-bootstrap\"\n\nimport LZUTF8 from \"lzutf8\";\n\nimport StatsContext, {useStats} from \"./StatsContext\"\nimport PerksContext, {Perk, usePerks} from \"./PerksContext\"\nimport StartingStats from \"./StartingStats\"\nimport Header from \"./Header\"\nimport PerksGrid from \"./PerksGrid\"\nimport PerksDetail from \"./PerksDetail\"\nimport LevelControl from \"./LevelControl\";\nimport Bobbleheads from \"./Bobbleheads\";\n\nconst usePreserveState = () => {\n    const {SPECIAL, getLevel} = useContext(StatsContext)\n    const {perks} = useContext(PerksContext)\n    useEffect(() => {\n        const state = {\n            SPECIAL: SPECIAL,\n            level: getLevel(),\n            perksAdded: perks.map(it => {\n                const {name, rank} = it\n                return {name, rank} as Perk\n            })\n            .reduce((arr, perk) => {\n                const existing = arr.findIndex(it => it.name === perk.name)\n                if (existing >= 0) arr.splice(existing, 1)\n                arr.push(perk)\n                return arr\n            }, [] as Perk[])\n        }\n        window.history.replaceState(null, document.title, `#${LZUTF8.compress(JSON.stringify(state), {outputEncoding: \"Base64\"})}`)\n    }, [SPECIAL, perks, getLevel])\n}\n\nconst AppStateListener = ({children}: PropsWithChildren<any>) => {\n    usePreserveState()\n    return (<>{children}</>)\n}\n\nconst AppContextProvider = ({children}: PropsWithChildren<any>) => {\n    const {\n        SPECIAL,\n        level,\n        perksAdded\n    } = JSON.parse(LZUTF8.decompress(window.location.hash.substring(1, window.location.hash.length), {inputEncoding: \"Base64\"}) || \"{}\")\n    const stats = useStats({SPECIAL, level})\n    const perks = usePerks({level: stats.getLevel(), perksAdded})\n    return (\n        <StatsContext.Provider value={stats}>\n            <PerksContext.Provider value={useMemo(() => perks, [perks])}>\n                <AppStateListener>\n                    {children}\n                </AppStateListener>\n            </PerksContext.Provider>\n        </StatsContext.Provider>\n    )\n}\n\nconst App = () => {\n    return (\n        <AppContextProvider>\n            <Container fluid>\n                <Header/>\n                <Row>\n                    <Col xl={3}>\n                        <StartingStats/>\n                        <Bobbleheads/>\n                        <LevelControl/>\n                        <PerksDetail/>\n                    </Col>\n                    <Col xl={9}>\n                        <PerksGrid/>\n                    </Col>\n                </Row>\n            </Container>\n        </AppContextProvider>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}