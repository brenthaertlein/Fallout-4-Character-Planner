{"version":3,"sources":["StatsContext.ts","PerksContext.ts","StartingStats.tsx","Header.tsx","PerkElement.tsx","PerksGrid.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["defaultSpecial","STRENGTH","PERCEPTION","ENDURANCE","CHARISMA","INTELLIGENCE","AGILITY","LUCK","StatsContext","React","createContext","SPECIAL","PerksContext","perks","Stat","name","value","Consumer","increment","decrement","pointsRemaining","ListGroupItem","className","Button","size","style","padding","onClick","disabled","paddingLeft","paddingRight","minWidth","StartingStats","marginBottom","ListGroup","Object","entries","map","Header","Navbar","bg","Brand","src","height","width","alt","fontSize","color","fontWeight","variant","PerkStar","filled","enabled","perk","special","rank","level","add","remove","xmlns","fill","viewBox","opacity","cursor","d","PerkElement","img","levels","getRank","getLevel","OverlayTrigger","trigger","placement","overlay","Popover","id","Title","Content","description","perkPointsRemaining","border","display","justifyContent","find","it","PerksGrid","Row","category","Col","substring","ranked","App","stats","useState","setSpecial","setLevel","changeValue","stat","target","Math","min","max","values","reduce","a","b","useStats","setPerks","local","allPerks","ranks","filter","other","concat","existing","higher","removePerksBelowLevel","length","usePerks","Provider","useMemo","Container","fluid","md","paddingTop","tooltip","onChange","changeEvent","parseInt","obj","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9361c6b6.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport type SPECIAL = {\n    STRENGTH: number,\n    PERCEPTION: number,\n    ENDURANCE: number,\n    CHARISMA: number,\n    INTELLIGENCE: number,\n    AGILITY: number,\n    LUCK: number\n}\n\nexport type Stats = {\n    SPECIAL: SPECIAL,\n    increment: (stat: string) => void,\n    decrement: (stat: string) => void,\n    pointsRemaining: () => number,\n    getRank: (stat: string) => number,\n    getLevel: () => number,\n    setLevel: (level: number) => void\n}\n\nconst defaultSpecial = {\n    STRENGTH: 1, PERCEPTION: 1, ENDURANCE: 1, CHARISMA: 1, INTELLIGENCE: 1, AGILITY: 1, LUCK: 1\n} as SPECIAL\n\nconst MAX_POINTS = 28\n\nexport const useStats = (): Stats => {\n    const [SPECIAL, setSpecial] = useState<SPECIAL>(defaultSpecial)\n    const [level, setLevel] = useState(1)\n\n    const changeValue = (stat: string, value: number) => {\n        const target = getRank(stat);\n        setSpecial({...SPECIAL, [stat]: Math.min(Math.max(target + value, 1), 10)})\n    }\n\n    const increment = (stat: string) => {\n        changeValue(stat, 1)\n    }\n\n    const decrement = (stat: string) => changeValue(stat, -1)\n\n    const pointsRemaining = () => {\n        const pointsUsed = Object.values(SPECIAL).reduce((a, b) => a + Math.min(b, 10), 0)\n        return MAX_POINTS - pointsUsed\n    }\n\n    const getRank = (stat: string): number => (SPECIAL as any)[stat]\n\n    return {\n        SPECIAL,\n        increment,\n        decrement,\n        pointsRemaining,\n        getRank,\n        getLevel: () => level,\n        setLevel: (level: number) => setLevel(Math.min(level, 50))\n    } as Stats;\n}\n\nconst StatsContext = React.createContext<Stats>({SPECIAL: defaultSpecial} as Stats)\n\nexport default StatsContext\n","import React, {useState} from \"react\";\n\nimport allPerks from \"./perks.json\"\n\nexport type Perk = {\n    special: string,\n    name: string,\n    rank: number,\n    level: number,\n    description?: string,\n    ranks?: number\n}\n\nexport type Perks = {\n    perks: Perk[],\n    add: (perk: Perk) => void,\n    remove: (perk: Perk) => void,\n    removePerksBelowLevel: (level: number) => void,\n    perkPointsRemaining: () => number\n}\n\nexport const usePerks = ({level}: {level: number}): Perks => {\n    const [perks, setPerks] = useState<Array<Perk>>([])\n\n    const add = (perk: Perk) => {\n        // const add = Array.from({length: perk.rank}).map((it, index) => ({...perk, rank: index + 1}))\n        const local = allPerks\n        .find(it => it.special === perk.special)\n        ?.perks\n        .find(it => it.name === perk.name)\n        const add = local\n        ?.ranked\n        .map(it => ({...it, name: local.name, ranks: local.ranks}))\n        .filter(it => it.rank <= perk.rank)\n        .map(it => ({...it, special: perk.special} as Perk)) as Perk[]\n        const other = perks.filter(it => it.name !== perk.name)\n        setPerks([...other].concat(add))\n    }\n\n    const remove = (perk: Perk) => {\n        const existing = perks.filter(it => it.name == perk.name)\n        const other = perks.filter(it => it.name !== perk.name)\n        const higher = existing.find(it => it.rank > perk.rank)\n        const add = existing.filter(it => higher ? it.rank <= perk.rank : it.rank < perk.rank)\n        setPerks([...other, ...add])\n    }\n\n    const removePerksBelowLevel = (level: number) => {\n        setPerks(perks.filter(it => it.level < level))\n    }\n\n    return {\n        perks,\n        add,\n        remove,\n        removePerksBelowLevel,\n        perkPointsRemaining: () => {\n            return level - 1 - perks.length\n        }\n    } as Perks\n}\n\nconst PerksContext = React.createContext<Perks>({perks: [] as Perk[]} as Perks)\n\nexport default PerksContext\n","import StatsContext, {Stats} from \"./StatsContext\"\nimport {Button, ListGroup, ListGroupItem} from \"react-bootstrap\";\n\nconst StartingStats = () => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({SPECIAL, pointsRemaining}: Stats) => {\n                    return (\n                        <>\n                            <div style={{padding: 2, marginBottom: 10}}>\n                                <h3>S.P.E.C.I.A.L</h3>\n                                <span>{pointsRemaining()} points left to spend</span>\n                            </div>\n                            <ListGroup>\n                                {\n                                    Object.entries(SPECIAL)\n                                    .map(\n                                        ([name, value]) => <Stat key={name} name={name} value={value}/>\n                                    )\n                                }\n                            </ListGroup>\n                        </>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype StatProps = {\n    name: string,\n    value: number\n}\n\nconst Stat = ({name, value}: StatProps) => {\n\n    return (\n        <StatsContext.Consumer>\n            {\n                ({increment, decrement, pointsRemaining}: Stats) =>\n                    <ListGroupItem>\n                        <span>\n                            {name}:\n                        </span>\n                        <span className={\"float-end\"}>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => decrement(name)}\n                                    disabled={value <= 1}\n                            >\n                                -\n                            </Button>\n                            <span\n                                style={{\n                                    paddingLeft: 10,\n                                    paddingRight: 10,\n                                    minWidth: 40\n                                }}\n                            >\n                                {value}\n                            </span>\n                            <Button size={\"sm\"}\n                                    style={{padding: \".1rem .5rem\"}}\n                                    onClick={() => increment(name)}\n                                    disabled={value >= 10 || pointsRemaining() <= 0}\n                            >\n                                +\n                            </Button>\n                        </span>\n                    </ListGroupItem>\n            }\n        </StatsContext.Consumer>\n    )\n}\n\nexport default StartingStats\n","import {Button, Navbar} from \"react-bootstrap\";\n\nconst Header = () => {\n    return (\n        <Navbar bg={\"light\"} style={{marginBottom: 20}}>\n            <Navbar.Brand>\n                <img src={\"img/brand.jpg\"} style={{height: 30, width: 30}} alt={\"Brand\"}/>\n                <span style={{paddingLeft: 10, fontSize: 18, color: \"#777\", fontWeight: 500}}>\n                    Fallout 4 Character Planner\n                </span>\n            </Navbar.Brand>\n            <Button style={{fontSize: 14}} variant={\"danger\"}>\n                Reset\n            </Button>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import {OverlayTrigger, Popover} from \"react-bootstrap\";\nimport StatsContext, {Stats} from \"./StatsContext\";\nimport PerksContext, {Perks} from \"./PerksContext\";\n\ntype PerkProps = {\n    special: string,\n    img: string,\n    name: string,\n    rank: number,\n    levels: any[]\n}\n\nconst PerkElement = ({special, img, name, rank, levels}: PerkProps) => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({getRank, getLevel}: Stats) => {\n                    return (\n                        <div style={{padding: 10}}>\n                            <OverlayTrigger\n                                trigger={[\"hover\", \"focus\"]}\n                                placement={\"left\"}\n                                overlay={\n                                    <Popover id={name}>\n                                        <Popover.Title>{name}</Popover.Title>\n                                        <Popover.Content>\n                                            {\n                                                levels.map(level => {\n                                                    return (\n                                                        <p key={`${level.name} ${level.rank}`}>\n                                                            Rank {level.rank}: {level.description}\n                                                        </p>\n                                                    )\n                                                })\n                                            }\n                                        </Popover.Content>\n                                    </Popover>\n                                }\n                            >\n                                <PerksContext.Consumer>\n                                    {\n                                        ({perks, perkPointsRemaining}: Perks) => {\n                                            return (\n                                                <div\n                                                    style={{opacity: getRank(special) >= rank ? 1 : 0.3}}>\n                                                    <img\n                                                        src={`img/${img}`}\n                                                        alt={name}\n                                                        style={{\n                                                            border: \"0px solid #777\"\n                                                        }}\n                                                    />\n                                                    <div style={{\n                                                        display: \"flex\",\n                                                        justifyContent: \"center\"\n                                                    }}>\n                                                        {\n                                                            levels.map(level => <PerkStar\n                                                                key={`name-${level.rank}`}\n                                                                filled={!!perks.find(it => it.name === name && it.rank >= level.rank)}\n                                                                enabled={getRank(special) >= rank && getLevel() >= level.level && perkPointsRemaining() > 0}\n                                                                special={special}\n                                                                name={name}\n                                                                rank={level.rank}\n                                                                level={level.level}\n                                                            />)\n                                                        }\n                                                    </div>\n                                                </div>\n                                            )\n                                        }\n                                    }\n                                </PerksContext.Consumer>\n                            </OverlayTrigger>\n                        </div>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype PerkStarProps = {\n    filled?: boolean,\n    enabled: boolean,\n    special: string,\n    name: string,\n    rank: number,\n    level: number\n}\n\nconst PerkStar = ({filled = false, enabled, special, name, rank, level}: PerkStarProps) => {\n    const perk = {special, name, rank, level}\n    return (\n        <PerksContext.Consumer>\n            {\n                ({add, remove}: Perks) => {\n                    return (\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"16\"\n                            height=\"16\"\n                            fill={filled ? \"yellow\" : \"currentColor\"}\n                            className=\"bi bi-star\"\n                            viewBox=\"0 0 16 16\"\n                            onClick={() => enabled && (filled ? remove(perk) : add(perk))}\n                            style={{\n                                opacity: enabled ? 1 : 0.3,\n                                cursor: enabled ? \"pointer\" : \"cursor\"\n                            }}\n                        >\n                            <path\n                                // style={{fill: \"yellow\"}}\n                                // fill={\"yellow\"}\n                                className={\"icon\"}\n                                d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n                            />\n                        </svg>\n                    )\n                }\n            }\n        </PerksContext.Consumer>\n    )\n}\n\nexport default PerkElement\n","import perks from \"./perks.json\"\nimport {Col, Row} from \"react-bootstrap\";\nimport StatsContext from \"./StatsContext\";\nimport PerkElement from \"./PerkElement\";\n\nconst PerksGrid = () => {\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) => {\n                    return (\n                        <Row style={{padding: 12}}>\n                            {\n                                perks.map(\n                                    category => {\n                                        return (\n                                            <Col key={category.special}>\n                                                <Row style={{fontWeight: 600}}>\n                                                    {category.special.substring(0, 2)}: {getRank(category.special)}\n                                                </Row>\n                                                {\n                                                    category.perks.map(\n                                                        perk => {\n                                                            return (\n                                                                <PerkElement\n                                                                    key={perk.name}\n                                                                    special={category.special}\n                                                                    img={perk.img}\n                                                                    name={perk.name}\n                                                                    rank={perk.rank}\n                                                                    levels={perk.ranked}\n                                                                />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Col>\n                                        )\n                                    }\n                                )\n                            }\n                        </Row>\n                    )\n                }}\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksGrid\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nimport StatsContext, {useStats} from \"./StatsContext\"\nimport PerksContext, {usePerks} from \"./PerksContext\"\nimport StartingStats from \"./StartingStats\"\nimport Header from \"./Header\";\nimport PerksGrid from \"./PerksGrid\";\nimport {useMemo} from \"react\";\n\nconst App = () => {\n    const stats = useStats();\n    const perks = usePerks({level: stats.getLevel()});\n    return (\n        <StatsContext.Provider value={stats}>\n            <PerksContext.Provider value={useMemo(() => perks, [perks])}>\n                <Container fluid>\n                    <Header/>\n                    <Row>\n                        <Col md={3}>\n                            <StartingStats/>\n                            <div style={{paddingTop: 10, justifyContent: \"center\"}}>\n                                Level: {stats.getLevel()}\n                                <div\n                                    style={{width: \"100%\"}}\n                                >\n                                    <RangeSlider\n                                        disabled={stats.pointsRemaining() > 0}\n                                        size={\"lg\"}\n                                        value={stats.getLevel()}\n                                        tooltip={\"off\"}\n                                        min={1}\n                                        max={50}\n                                        onChange={changeEvent => {\n                                            const level = parseInt(changeEvent.target.value)\n                                            stats.setLevel(level)\n                                            perks.removePerksBelowLevel(level)\n                                        }}\n                                    />\n                                    {\n                                        stats.getLevel() > 1 &&\n                                        <p>\n                                          Remaining perk\n                                          points: {perks.perkPointsRemaining()}\n                                        </p>\n                                    }\n                                </div>\n                            </div>\n                            <div>\n                                {\n                                    (() => {\n                                        const map = perks.perks\n                                        .reduce((obj, it) => {\n                                            const {name, ranks, rank, level, description} = it\n                                            const target = obj[it.name] || {name, ranks, ranked: []}\n                                            target.ranked.push({rank, level, description})\n                                            obj[it.name] = target\n                                            return obj\n                                        }, {} as any)\n                                        return Object.values(map).map((value: any) => (\n                                            <>\n                                                <p>{value.name}: {value.ranked.length} / {value.ranks}</p>\n                                                {\n                                                    value.ranked.map((rank: any) =>\n                                                        <p style={{\n                                                            paddingLeft: 20,\n                                                            fontSize: 12\n                                                        }}>{rank.description}</p>)\n                                                }\n                                            </>\n                                        ))\n                                    })()\n\n                                }\n                            </div>\n                        </Col>\n                        <Col md={9}>\n                            <PerksGrid/>\n                        </Col>\n                    </Row>\n                </Container>\n            </PerksContext.Provider>\n        </StatsContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}