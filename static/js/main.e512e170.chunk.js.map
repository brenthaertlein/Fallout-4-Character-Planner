{"version":3,"sources":["StatsContext.ts","BuildContext.ts","MatchMedia.ts","Perks.ts","PerksContext.ts","StartingStats.tsx","RenameModal.tsx","Modal.ts","ShareModal.tsx","Buttons.tsx","Randomizer.ts","Header.tsx","PerkStar.tsx","PerkElement.tsx","PerksGrid.tsx","PerksDetail.tsx","Bobbleheads.tsx","PerksTower.tsx","BuildInfo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["StatType","BuildContext","React","createContext","Breakpoints","defaultSpecial","Object","keys","reduce","obj","key","StatsContext","SPECIAL","PerksData","PerksContext","flatMap","it","special","perks","map","name","requiredSpecial","rank","ranked","level","description","ranks","length","Stat","value","useContext","increment","decrement","pointsRemaining","getRank","hasBobblehead","remove","ListGroupItem","style","userSelect","className","Button","size","padding","onClick","perk","filter","a","b","removePerks","disabled","paddingLeft","paddingRight","minWidth","StartingStats","Consumer","marginBottom","ListGroup","entries","RenameModal","show","setShow","buildName","setBuildName","setName","useState","Modal","onHide","centered","Header","Body","InputGroup","Form","Control","type","onChange","e","target","Footer","undefined","useModal","ShareModal","window","location","href","readOnly","Append","OverlayTrigger","trigger","delay","overlay","Tooltip","id","placement","ref","triggerHandler","Text","cursor","navigator","clipboard","writeText","xmlns","width","height","fill","viewBox","marginTop","marginLeft","d","Buttons","resetStats","reset","resetPerks","showShareModal","setShowShareModal","showRenameModal","setShowRenameModal","getLevel","setLevel","perkPointsRemaining","addPerk","add","availablePerks","getPerkRank","randomizing","setRandomizing","failedAddPerkCount","setFailedAddPerkCount","useEffect","stats","stat","Math","floor","random","available","count","failed","outOfPoints","randomize","useRandomizer","buttonStyle","fontSize","marginRight","ButtonToolbar","variant","maxWidth","mediaSizes","xs","sm","md","lg","xl","xxl","useMatchMedia","mediaSize","setMediaSize","mediaQueryList","matchMedia","forEach","addEventListener","matches","gt","breakpoint","eq","lt","Navbar","bg","Brand","src","process","alt","color","fontWeight","PerkStar","filled","enabled","setSize","addable","setAddable","opacity","PerkElement","perkTreePerk","getPerk","img","obtainable","paddingTop","display","justifyContent","transition","Popover","Title","Content","showLevelRequirement","Image","border","textAlign","find","PerksGrid","Row","category","Col","substring","PerksDetail","perkLevelRequired","paddingBottom","max","values","push","Bobbleheads","bobbleToggle","maxHeight","PerksTower","setCategory","ToggleButtonGroup","ToggleButton","BuildInfo","AppStateListener","children","getBobbleHeads","state","bobbleheads","perksAdded","arr","existing","findIndex","splice","history","replaceState","document","title","LZUTF8","compress","JSON","stringify","outputEncoding","usePreserveState","AppContextProvider","parse","decompress","hash","inputEncoding","initialLevel","savedBobbleheads","setSpecial","setBobbleheads","changeValue","min","pointsUsed","found","useStats","added","setPerks","useMemo","local","other","concat","higher","usePerks","build","useBuild","Provider","App","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e512e170.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport type SPECIAL = {\n    STRENGTH: number,\n    PERCEPTION: number,\n    ENDURANCE: number,\n    CHARISMA: number,\n    INTELLIGENCE: number,\n    AGILITY: number,\n    LUCK: number\n}\n\nexport type Stats = {\n    SPECIAL: SPECIAL,\n    increment: (stat: string) => void,\n    decrement: (stat: string) => void,\n    reset: () => void,\n    pointsRemaining: () => number,\n    getRank: (stat: string) => number,\n    getLevel: () => number,\n    setLevel: (level: number) => void,\n    getBobbleHeads: () => StatType[],\n    bobbleToggle: (stat: StatType) => void,\n    hasBobblehead: (stat: string) => boolean\n}\n\nexport enum StatType {\n    STRENGTH = \"STRENGTH\", PERCEPTION = \"PERCEPTION\", ENDURANCE = \"ENDURANCE\", CHARISMA = \"CHARISMA\", INTELLIGENCE = \"INTELLIGENCE\", AGILITY = \"AGILITY\", LUCK = \"LUCK\"\n}\n\nconst defaultSpecial = Object.keys(StatType).reduce((obj, key) => {\n    obj[key] = 1\n    return obj\n}, {} as any) as SPECIAL\n\nconst MAX_POINTS = 28\n\nexport const useStats = ({\n                             SPECIAL: special = defaultSpecial,\n                             level: initialLevel = 50,\n                             bobbleheads: savedBobbleheads = []\n                         }: { SPECIAL?: SPECIAL, level?: number, bobbleheads: [] }): Stats => {\n    const [SPECIAL, setSpecial] = useState<SPECIAL>(special)\n    const [level, setLevel] = useState(initialLevel)\n    const [bobbleheads, setBobbleheads] = useState<StatType[]>(savedBobbleheads)\n\n    const changeValue = (stat: string, value: number) => {\n        const target = getRank(stat);\n        setSpecial({\n            ...SPECIAL,\n            [stat]: Math.min(Math.max(target + value, 1), bobbleheads.findIndex(it => it === stat) >= 0 ? 11 : 10)\n        })\n    }\n\n    const increment = (stat: string) => {\n        changeValue(stat, 1)\n    }\n\n    const decrement = (stat: string) => changeValue(stat, -1)\n\n    const pointsRemaining = () => {\n        const pointsUsed = Object.values(SPECIAL).reduce((a, b) => a + Math.min(b, 11), 0) - bobbleheads.length\n        return Math.max(0, MAX_POINTS - pointsUsed)\n    }\n\n    const getRank = (stat: string): number => (SPECIAL as any)[stat]\n\n    const reset = () => {\n        setSpecial(defaultSpecial)\n        setBobbleheads([])\n    }\n\n    const bobbleToggle = (stat: StatType) => {\n        const found = bobbleheads.findIndex(it => it === stat)\n        if (found < 0) {\n            bobbleheads.push(stat)\n            increment(stat)\n        } else {\n            bobbleheads.splice(found, 1)\n            decrement(stat)\n        }\n        setBobbleheads([...bobbleheads])\n    }\n\n    return {\n        SPECIAL,\n        increment,\n        decrement,\n        reset,\n        pointsRemaining,\n        getRank,\n        getLevel: () => level,\n        setLevel: (level: number) => setLevel(Math.min(level, 50)),\n        getBobbleHeads: () => bobbleheads,\n        bobbleToggle,\n        hasBobblehead: (stat: string) => !!bobbleheads.find(it => it === stat),\n    } as Stats;\n}\n\nconst StatsContext = React.createContext<Stats>({SPECIAL: defaultSpecial} as Stats)\n\nexport default StatsContext\n","import React, {useState} from \"react\";\n\ntype UseBuild = {\n    name?: string\n}\n\nexport const useBuild = ({name: buildName}: UseBuild) => {\n    const [name, setName] = useState(buildName)\n\n    return {\n        name,\n        setName\n    } as Build\n}\n\ntype Build = {\n    name?: string,\n    setName: (value?: string) => void\n}\n\nconst BuildContext = React.createContext({} as Build)\n\nexport default BuildContext\n","import {useEffect, useState} from \"react\";\n\nconst maxWidth = (width: number) => `(max-width: ${width - .02}px)`\n\nconst minWidth = (width: number) => `(min-width: ${width}px)`\n\nexport enum Breakpoints {\n    xs,\n    sm,\n    md,\n    lg,\n    xl,\n    xxl\n}\n\n// const breakpoints = [576, 768, 992, 1200]\n\nconst mediaSizes = {\n    xs: maxWidth(576),\n    sm: `${minWidth(576)} and ${maxWidth(768)}`,\n    md: `${minWidth(768)} and ${maxWidth(992)}`,\n    lg: `${minWidth(992)} and ${maxWidth(1200)}`,\n    xl: `${minWidth(1200)} and ${maxWidth(1920)}`,\n    xxl: `${minWidth(1920)}`\n}\n\nexport const useMatchMedia = () => {\n\n    const [mediaSize, setMediaSize] = useState<string>()\n\n    const gt = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] > (Breakpoints as any)[breakpoint] : true\n    }\n\n    const eq = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] === (Breakpoints as any)[breakpoint] : true\n    }\n\n    const lt = (breakpoint: string) => {\n        return mediaSize ? (Breakpoints as any)[mediaSize] < (Breakpoints as any)[breakpoint] : true\n    }\n\n    useEffect(() => {\n        Object\n        .entries(mediaSizes)\n        .map(([key, value]) => ({key, mediaQueryList: window.matchMedia(value)}))\n        .forEach(({key, mediaQueryList}) => {\n            mediaQueryList.addEventListener(\"change\", it => {\n                if (it.matches) {\n                    setMediaSize(key)\n                }\n            })\n            if (mediaQueryList.matches) {\n                setMediaSize(key)\n            }\n        })\n    }, [])\n\n    return {\n        mediaSize,\n        gt,\n        eq,\n        lt\n    }\n}\n","import data from \"./perks.json\"\nimport {Perk} from \"./PerksContext\";\n\nexport type PerkTreePerkRank = { rank: number; level: number; description: string; }\n\nexport type PerkTreePerk = { rank: number; name: string; img: string; ranks: number; ranked: PerkTreePerkRank[]; }\n\nexport type PerkTreeCategory = { special: string; perks: PerkTreePerk[] }\n\nexport const PerksData = data as PerkTreeCategory[]\n\nexport const Perks = PerksData\n.flatMap((it: any) => {\n    const {special, perks} = it\n    return perks.map((it: any) => ({special, ...it}))\n})\n.flatMap((it: any) => {\n    const {special, name, rank: requiredSpecial, ranked} = it\n    return ranked.map((it: any) => {\n        const {level, rank, description} = it\n        return {\n            special,\n            name,\n            level,\n            rank,\n            requiredSpecial,\n            description,\n            ranks: ranked.length\n        }\n    })\n}) as Perk[]\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {PerksData} from \"./Perks\";\n\nexport type Perk = {\n    special: string,\n    name: string,\n    rank: number,\n    level: number,\n    requiredSpecial?: number,\n    description?: string,\n    ranks?: number\n}\n\nexport type Perks = {\n    perks: Perk[],\n    add: (perk: Perk) => void,\n    remove: (perk: Perk) => void,\n    perkPointsRemaining: () => number,\n    availablePerks: () => Perk[],\n    reset: () => void,\n    perkLevelRequired: number,\n    getPerkRank: (name: String) => number,\n    getPerk: (name: String) => Perk | undefined\n}\n\ntype UsePerks = { level: number, perksAdded?: Perk[] }\n\nexport const usePerks = ({level, perksAdded = []}: UsePerks): Perks => {\n    const [perks, setPerks] = useState<Array<Perk>>(\n        PerksData\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, rank: requiredSpecial, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {\n                    special,\n                    name,\n                    level,\n                    rank,\n                    description,\n                    requiredSpecial,\n                    ranks: ranked.length\n                }\n            })\n        })\n        .filter(it => perksAdded.find(added => it.name === added.name && it.rank <= added.rank))\n    )\n\n    const add = (perk: Perk) => {\n        const local = PerksData\n        .find(it => it.special === perk.special)\n        ?.perks\n        .find(it => it.name === perk.name)\n        const add = local\n        ?.ranked\n        .map(it => ({...it, name: local.name, ranks: local.ranks, requiredSpecial: local.rank}))\n        .filter(it => it.rank <= perk.rank)\n        .map(it => ({...it, special: perk.special} as Perk)) as Perk[]\n        const other = perks.filter(it => it.name !== perk.name)\n        setPerks([...other].concat(add))\n    }\n\n    const remove = (perk: Perk) => {\n        const existing = perks.filter(it => it.name === perk.name)\n        const other = perks.filter(it => it.name !== perk.name)\n        const higher = existing.find(it => it.rank > perk.rank)\n        const add = existing.filter(it => higher ? it.rank <= perk.rank : it.rank < perk.rank)\n        setPerks([...other, ...add])\n    }\n\n    const perkPointsRemaining = () => level - 1 - perks.length\n\n    const availablePerks = () =>\n        PerksData\n        .flatMap((it: any) => {\n            const {special, perks} = it\n            return perks.map((it: any) => ({special, ...it}))\n        })\n        .flatMap((it: any) => {\n            const {special, name, rank: requiredSpecial, ranked} = it\n            return ranked.map((it: any) => {\n                const {level, rank, description} = it\n                return {\n                    special,\n                    name,\n                    level,\n                    rank,\n                    requiredSpecial,\n                    description,\n                    ranks: ranked.length\n                }\n            })\n        })\n        .filter(it => !perks.find(perk => it.name === perk.name && it.rank <= perk.rank))\n\n    const getPerk = (name: String) => perks\n    .filter(it => it.name === name)\n    .reduce((a, b) => a.rank > b.rank ? a : b, {} as Perk)\n\n    const getPerkRank = (name: String) => perks.filter(it => it.name === name)?.length ?? 0\n\n    const reset = () => {\n        setPerks([])\n    }\n\n    const perkLevelRequired = useMemo(() => perks.reduce((a, b) => a.level > b.level ? a : b, {} as Perk).level, [perks])\n\n    useEffect(() => {\n        setPerks(perks => perks.filter(it => it.level < level))\n    }, [level])\n\n    return {\n        perks,\n        add,\n        remove,\n        perkPointsRemaining,\n        availablePerks,\n        getPerkRank,\n        getPerk,\n        perkLevelRequired,\n        reset\n    } as Perks\n}\n\nconst PerksContext = React.createContext<Perks>({perks: [] as Perk[]} as Perks)\n\nexport default PerksContext\n","import StatsContext, {Stats} from \"./StatsContext\"\nimport {Button, ListGroup, ListGroupItem} from \"react-bootstrap\"\nimport {useContext} from \"react\";\nimport PerksContext, {Perk} from \"./PerksContext\";\n\nconst StartingStats = () => {\n    return (\n        <StatsContext.Consumer>\n            {\n                ({SPECIAL, pointsRemaining}: Stats) => {\n                    return (\n                        <>\n                            <div style={{padding: 2, marginBottom: 10}}>\n                                <h3>S.P.E.C.I.A.L</h3>\n                                <span>{pointsRemaining()} points left to spend</span>\n                            </div>\n                            <ListGroup>\n                                {\n                                    Object.entries(SPECIAL)\n                                    .map(\n                                        ([name, value]) =>\n                                            <Stat key={name} name={name} value={value}/>\n                                    )\n                                }\n                            </ListGroup>\n                        </>\n                    )\n                }\n            }\n        </StatsContext.Consumer>\n    )\n}\n\ntype StatProps = {\n    name: string,\n    value: number\n}\n\nconst Stat = ({name, value}: StatProps) => {\n    const {increment, decrement, pointsRemaining, getRank, hasBobblehead} = useContext(StatsContext)\n    const {perks, remove} = useContext(PerksContext)\n\n    const removePerks = (special: string) => {\n        const perk = perks\n        .filter(it => it.special === special && it.requiredSpecial === value)\n        .reduce((a, b) => a.rank < b.rank ? a : b, {} as Perk)\n        perk && remove({...perk, rank: 0})\n    }\n\n    return (\n        <ListGroupItem>\n            <span style={{userSelect: \"none\"}}>\n                {name}:\n            </span>\n            <span className={\"float-end\"}>\n                <Button size={\"sm\"}\n                        style={{padding: \".1rem .5rem\"}}\n                        onClick={\n                            () => {\n                                decrement(name)\n                                removePerks(name)\n                            }\n                        }\n                        disabled={value <= (hasBobblehead(name) ? 2 : 1)}\n                >\n                    -\n                </Button>\n                <span\n                    style={{\n                        paddingLeft: 10,\n                        paddingRight: 10,\n                        minWidth: 40,\n                        userSelect: \"none\"\n                    }}\n                >\n                    {value}\n                </span>\n                <Button size={\"sm\"}\n                        style={{padding: \".1rem .5rem\"}}\n                        onClick={() => increment(name)}\n                        disabled={getRank(name) >= (hasBobblehead(name) ? 11 : 10) || pointsRemaining() <= 0}\n                >\n                    +\n                </Button>\n            </span>\n        </ListGroupItem>\n    )\n}\n\nexport default StartingStats\n","import {useContext, useState} from \"react\";\nimport BuildContext from \"./BuildContext\";\nimport {Button, Form, InputGroup, Modal} from \"react-bootstrap\";\nimport {UseModal} from \"./Modal\";\n\nconst RenameModal = ({show, setShow}: UseModal) => {\n    const {name: buildName, setName: setBuildName} = useContext(BuildContext)\n    const [name, setName] = useState(buildName || \"\")\n    return (\n        <Modal show={show} onHide={() => setShow(false)} centered>\n            <Modal.Header>Name your build!</Modal.Header>\n            <Modal.Body>\n                <InputGroup>\n                    <Form.Control\n                        type={\"text\"}\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                    />\n                </InputGroup>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    className={\"float-end\"}\n                    onClick={() => {\n                        setBuildName(name || undefined)\n                        setShow(false)\n                    }}\n                >\n                    Save\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default RenameModal\n","import {useState} from \"react\";\n\nexport type UseModal = {\n    show: boolean,\n    setShow: (value: boolean) => void\n}\n\nexport const useModal = () => {\n    const [show, setShow] = useState(false)\n\n    return {\n        show,\n        setShow\n    } as UseModal\n}\n","import {Form, InputGroup, Modal, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\";\nimport {UseModal} from \"./Modal\";\n\nconst ShareModal = ({show, setShow}: UseModal) => {\n    return (\n        <Modal show={show} onHide={() => setShow(false)} centered>\n            <Modal.Header>Share your build with friends!</Modal.Header>\n            <Modal.Body>\n                <InputGroup>\n                    <Form.Control type={\"text\"} value={window.location.href} readOnly={true}/>\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            trigger={\"click\"}\n                            delay={50}\n                            overlay={\n                                <Tooltip id={\"copiedToClipboard\"}>\n                                    Copied to clipboard!\n                                </Tooltip>\n                            }\n                            placement={\"top\"}\n                        >\n                            {\n                                ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                                    <InputGroup.Text\n                                        style={{\n                                            cursor: \"pointer\"\n                                        }}\n                                        onClick={() => navigator.clipboard.writeText(window.location.href)}\n                                        {...triggerHandler}\n                                        ref={ref}\n                                    >\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            width=\"24\"\n                                            height=\"24\"\n                                            fill=\"currentColor\"\n                                            className=\"bi bi-clipboard\"\n                                            viewBox=\"0 0 24 24\"\n                                            style={{\n                                                marginTop: 4,\n                                                marginLeft: 4\n                                            }}\n                                        >\n                                            <path\n                                                d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\"/>\n                                            <path\n                                                d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\"/>\n                                        </svg>\n                                    </InputGroup.Text>\n                            }\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ShareModal\n","import {Button, ButtonToolbar} from \"react-bootstrap\";\nimport {useContext} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\nimport {useRandomizer} from \"./Randomizer\";\nimport BuildContext from \"./BuildContext\";\nimport RenameModal from \"./RenameModal\";\nimport {useModal} from \"./Modal\";\nimport ShareModal from \"./ShareModal\";\n\nconst Buttons = () => {\n    const {setName: setBuildName} = useContext(BuildContext)\n    const {reset: resetStats} = useContext(StatsContext)\n    const {reset: resetPerks} = useContext(PerksContext)\n    const {show: showShareModal, setShow: setShowShareModal} = useModal()\n    const {show: showRenameModal, setShow: setShowRenameModal} = useModal()\n\n    const {randomize, randomizing} = useRandomizer()\n\n    const share = () => setShowShareModal(!showShareModal)\n\n    const save = () => setShowRenameModal(!showRenameModal)\n\n    const reset = () => {\n        resetStats();\n        resetPerks();\n        setBuildName(undefined)\n    }\n\n    const buttonStyle = {fontSize: 14, marginRight: 10}\n\n    return (\n        <>\n            <ButtonToolbar>\n                <Button style={buttonStyle} variant={\"primary\"} onClick={() => save()}>\n                    Save\n                </Button>\n                <Button style={buttonStyle} variant={\"outline-danger\"} onClick={() => reset()}\n                        disabled={randomizing}>\n                    Reset\n                </Button>\n                <Button style={buttonStyle} variant={\"outline-primary\"} onClick={() => share()} disabled={randomizing}>\n                    Share\n                </Button>\n            </ButtonToolbar>\n            <ButtonToolbar style={{paddingLeft: 20}}>\n                <Button style={buttonStyle} variant={\"outline-success\"} onClick={() => randomize()}\n                        disabled={randomizing}>\n                    Randomize\n                </Button>\n            </ButtonToolbar>\n            <ShareModal show={showShareModal} setShow={setShowShareModal}/>\n            <RenameModal show={showRenameModal} setShow={setShowRenameModal}/>\n        </>\n    )\n\n}\n\nexport default Buttons\n","import {useContext, useEffect, useState} from \"react\";\nimport StatsContext from \"./StatsContext\";\nimport PerksContext from \"./PerksContext\";\n\nconst MAX_FAILURES = 100\n\nexport const useRandomizer = () => {\n    const {\n        getLevel,\n        setLevel,\n        pointsRemaining,\n        increment,\n        SPECIAL,\n        reset: resetStats\n    } = useContext(StatsContext)\n    const {\n        perkPointsRemaining,\n        add: addPerk,\n        availablePerks,\n        getPerkRank,\n        reset: resetPerks\n    } = useContext(PerksContext)\n\n    const [randomizing, setRandomizing] = useState(false)\n    const [failedAddPerkCount, setFailedAddPerkCount] = useState(0)\n\n    const randomize = () => {\n        resetStats()\n        resetPerks()\n        setRandomizing(true)\n    }\n\n    useEffect(() => {\n        if (randomizing) {\n            setLevel(50)\n            if (pointsRemaining() > 0) {\n                const stats = Object.keys(SPECIAL)\n                const stat = stats[Math.floor(Math.random() * stats.length)]\n                increment(stat)\n            }\n            if (perkPointsRemaining() > 0) {\n                const available = availablePerks()\n                    .filter(it => (it.requiredSpecial || 999) <= (SPECIAL as any)[it.special])\n                const perk = available[Math.floor(Math.random() * available.length)]\n                if (perkPointsRemaining() >= (perk.rank - getPerkRank(perk.name))) {\n                    addPerk(perk)\n                } else {\n                    setFailedAddPerkCount(count => count + 1)\n                }\n            }\n            const failed = failedAddPerkCount >= MAX_FAILURES\n            const outOfPoints = pointsRemaining() <= 0 && perkPointsRemaining() <= 0\n            if (failed || outOfPoints) {\n                setRandomizing(false)\n            }\n        }\n    }, [\n        randomizing, SPECIAL, addPerk, availablePerks, getPerkRank, increment, perkPointsRemaining,\n        pointsRemaining, getLevel, setLevel, failedAddPerkCount\n    ])\n\n    return {randomize, randomizing}\n}\n","import {Navbar} from \"react-bootstrap\"\nimport Buttons from \"./Buttons\";\nimport {useMatchMedia} from \"./MatchMedia\";\n\nconst Header = () => {\n    const {gt} = useMatchMedia()\n\n    return (\n        <Navbar bg={\"light\"} style={{marginBottom: 20}}>\n            <Navbar.Brand>\n                <img src={`${process.env.PUBLIC_URL}/img/brand.jpg`} style={{height: 30, width: 30}}\n                     alt={\"Brand\"}/>\n                <span style={{paddingLeft: 10, fontSize: 18, color: \"#777\", fontWeight: 500}}>\n                    Fallout 4 Character Planner\n                </span>\n            </Navbar.Brand>\n            {\n                gt(\"xs\") &&\n                <Buttons/>\n            }\n        </Navbar>\n    )\n}\n\nexport default Header\n","import PerksContext from \"./PerksContext\"\nimport {useContext, useEffect, useState} from \"react\";\nimport {useMatchMedia} from \"./MatchMedia\";\n\ntype PerkStarProps = {\n    filled?: boolean,\n    enabled: boolean,\n    special: string,\n    name: string,\n    rank: number,\n    level: number\n}\n\nconst PerkStar = ({filled = false, enabled, special, name, rank, level}: PerkStarProps) => {\n    const {add, remove, perkPointsRemaining} = useContext(PerksContext)\n    const {mediaSize} = useMatchMedia()\n\n    const [size, setSize] = useState(16)\n    const [addable, setAddable] = useState(false)\n\n    useEffect(() => {\n        if (mediaSize === \"xs\") {\n            setSize(48)\n        } else {\n            setSize(16)\n        }\n    }, [mediaSize])\n\n    const perk = {special, name, rank, level}\n\n    useEffect(() => {\n        setAddable(enabled && perkPointsRemaining() >= rank)\n    }, [enabled, perkPointsRemaining, rank])\n\n    return (\n        filled ?\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"yellow\"\n                width={size}\n                height={size}\n                className=\"bi bi-star-fill\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => remove(perk)}\n                style={{\n                    cursor: \"pointer\",\n                    fontSize: size\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\"/>\n            </svg>\n            :\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill={\"currentColor\"}\n                width={size}\n                height={size}\n                className=\"bi bi-star\"\n                viewBox=\"0 0 16 16\"\n                onClick={() => addable && add(perk)}\n                style={{\n                    opacity: addable ? 1 : 0.3,\n                    cursor: addable ? \"pointer\" : \"cursor\",\n                    fontSize: size\n                }}\n            >\n                <path\n                    className={\"icon\"}\n                    d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\"\n                />\n            </svg>\n    )\n}\n\nexport default PerkStar\n","import {Image, OverlayTrigger, Popover} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerksContext from \"./PerksContext\"\nimport PerkStar from \"./PerkStar\"\nimport {OverlayTriggerRenderProps} from \"react-bootstrap/OverlayTrigger\"\nimport {useContext} from \"react\";\nimport {useMatchMedia} from \"./MatchMedia\";\nimport {PerkTreePerk} from \"./Perks\";\n\ntype PerkProps = {\n    special: string,\n    img: string,\n    perk: PerkTreePerk\n}\n\nconst PerkElement = ({special, perk: perkTreePerk}: PerkProps) => {\n    const {getLevel, getRank} = useContext(StatsContext)\n    const {perks, getPerk} = useContext(PerksContext)\n    const {eq} = useMatchMedia()\n    const {img, name, rank: requiredSpecial, ranked} = perkTreePerk\n    const obtainable = getRank(special) >= requiredSpecial\n    const perk = getPerk(name)\n    return (\n        <div style={{\n            paddingTop: 10,\n            opacity: obtainable ? 1 : 0.3,\n            display: \"flex\",\n            justifyContent: \"center\"\n        }}>\n            <OverlayTrigger\n                trigger={[\"hover\", \"focus\"]}\n                placement={\"auto\"}\n                transition={false}\n                overlay={\n                    <Popover id={name}>\n                        <Popover.Title>{name}</Popover.Title>\n                        <Popover.Content>\n                            {\n                                ranked.map(it => {\n                                    const {level, rank, description} = it\n                                    const showLevelRequirement = (perk?.rank ?? 0) < rank\n                                    return (\n                                        <p key={`${name} ${rank}`}>\n                                            Rank {rank}\n                                            {\n                                                showLevelRequirement &&\n                                                <span\n                                                    style={{\n                                                        fontSize: 12,\n                                                        fontWeight: 700,\n                                                        paddingLeft: 4\n                                                    }}\n                                                >\n                                                    {\n\n                                                        level ?\n                                                            `(Requires Level ${level})`\n                                                            :\n                                                            !obtainable && `(Requires ${special} ${requiredSpecial})`\n                                                    }\n                                                </span>\n                                            }: {description}\n                                        </p>\n                                    )\n                                })\n                            }\n                        </Popover.Content>\n                    </Popover>\n                }\n            >\n                {\n                    ({ref, ...triggerHandler}: OverlayTriggerRenderProps) =>\n                        <div\n                            ref={ref}\n                            style={{\n                                opacity: obtainable ? 1 : 0.3,\n                                display: \"inline-block\",\n                                justifyContent: \"center\"\n                            }}>\n                            <div {...triggerHandler}>\n                                <Image\n                                    src={`${process.env.PUBLIC_URL}/img/${img}`}\n                                    alt={name}\n                                    style={{\n                                        border: \"0px solid #777\",\n                                        width: eq(\"xs\") ? \"66vw\" : \"100%\",\n                                        height: eq(\"xs\") ? \"66vw\" : \"100%\",\n                                    }}\n                                />\n                            </div>\n                            {\n                                eq(\"xs\") &&\n                                <h4 style={{textAlign: \"center\", paddingTop: 8}}>{name}</h4>\n                            }\n                            <div style={{\n                                display: \"flex\",\n                                justifyContent: \"center\"\n                            }}>\n                                {\n                                    ranked.map(it => <PerkStar\n                                        key={`${name}-${it.rank}`}\n                                        filled={!!perks.find(perk => perk.name === name && perk.rank >= it.rank)}\n                                        enabled={obtainable && getLevel() >= it.level}\n                                        special={special}\n                                        name={name}\n                                        rank={it.rank}\n                                        level={it.level}\n                                    />)\n                                }\n                            </div>\n                        </div>\n                }\n            </OverlayTrigger>\n        </div>\n    )\n}\n\nexport default PerkElement\n","import {Col, Row} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\nimport {PerksData} from \"./Perks\";\n\nconst PerksGrid = () => {\n    return (\n        <>\n            <h3>Perks</h3>\n            <StatsContext.Consumer>\n                {({getRank}) => {\n                    return (\n                        <Row style={{padding: 12}}>\n                            {\n                                PerksData.map(\n                                    category => {\n                                        return (\n                                            <Col key={category.special}\n                                                 style={{padding: \"0px 12px\"}}>\n                                                <Row style={{fontWeight: 600}}>\n                                                    {category.special.substring(0, 2)}: {getRank(category.special)}\n                                                </Row>\n                                                {\n                                                    category.perks.map(\n                                                        perk => {\n                                                            return (\n                                                                <PerkElement\n                                                                    key={perk.name}\n                                                                    img={perk.img}\n                                                                    special={category.special}\n                                                                    perk={perk}\n                                                                />\n                                                            )\n                                                        }\n                                                    )\n                                                }\n                                            </Col>\n                                        )\n                                    }\n                                )\n                            }\n                        </Row>\n                    )\n                }}\n            </StatsContext.Consumer>\n        </>\n    )\n}\n\nexport default PerksGrid\n","import PerksContext from \"./PerksContext\"\nimport {useContext, useState} from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nconst PerksDetail = () => {\n    const {perks, perkPointsRemaining, perkLevelRequired} = useContext(PerksContext)\n    const [show, setShow] = useState(true)\n    return (\n        <>\n            <div>\n                <h3 style={{display: \"inline\"}}>Perks Added</h3>\n                {\n                    perks.length ?\n                        <Button\n                            size={\"sm\"}\n                            onClick={() => setShow(!show)}\n                            style={{\n                                padding: \"0.1rem 0.2rem\",\n                                marginBottom: 10,\n                                marginLeft: 10,\n                            }}\n                        >\n                            {\n                                show ?\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"\n                                         fill=\"currentColor\" className=\"bi bi-dash\"\n                                         viewBox=\"0 0 16 16\">\n                                        <path\n                                            d=\"M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z\"/>\n                                    </svg>\n                                    :\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"\n                                         fill=\"currentColor\" className=\"bi bi-plus\"\n                                         viewBox=\"0 0 16 16\">\n                                        <path\n                                            d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"/>\n                                    </svg>\n                            }\n                        </Button>\n                        :\n                        <></>\n                }\n                <div style={{paddingBottom: 10, color: \"#505050\"}}>\n                    <span>\n                        Requires level: {Math.max(perkLevelRequired, 50 - perkPointsRemaining())}\n                    </span>\n                    <span className={\"float-end\"}>\n                        Remaining perk points: {perkPointsRemaining()}\n                    </span>\n                </div>\n            </div>\n            <div>\n                {\n                    show &&\n                    Object.values(\n                        perks.reduce((obj, it) => {\n                            const {name, ranks, rank, level, description} = it\n                            const target = obj[it.name] || {name, ranks, ranked: []}\n                            target.ranked.push({rank, level, description})\n                            obj[it.name] = target\n                            return obj\n                        }, {} as any)\n                    ).map(({name, ranked, ranks}: any) =>\n                        <span key={name}>\n                                <p>{name}: {ranked.length} / {ranks}</p>\n                            {\n                                ranked.map((rank: any) =>\n                                    <p\n                                        key={rank.level}\n                                        style={{\n                                            paddingLeft: 20,\n                                            fontSize: 12\n                                        }}\n                                    >\n                                        {rank.description}\n                                    </p>\n                                )\n                            }\n                            </span>\n                    )\n                }\n            </div>\n        </>\n    )\n}\n\nexport default PerksDetail\n","import {Image} from \"react-bootstrap\";\nimport StatsContext, {StatType} from \"./StatsContext\";\n\nconst Bobbleheads = () =>\n    <StatsContext.Consumer>\n        {({bobbleToggle, hasBobblehead}) =>\n            <div style={{\n                display: \"inline-flex\",\n                justifyContent: \"space-evenly\",\n                width: \"100%\",\n                textAlign: \"center\",\n                paddingTop: 10\n            }}>\n                {Object.keys(StatType).map(name => name as StatType).map(name =>\n                    <span\n                        key={name}\n                        style={{\n                            padding: 10,\n                            opacity: hasBobblehead(name) ? 1 : 0.5,\n                            cursor: \"pointer\"\n                        }}\n                        onClick={() => bobbleToggle(name)}\n                    >\n                            <Image\n                                style={{\n                                    maxHeight: 40,\n                                    maxWidth: 30,\n                                    userSelect: \"none\"\n                                }}\n                                src={`${process.env.PUBLIC_URL}/img/bobblehead.png`}\n                            />\n                            <p style={{userSelect: \"none\"}}>{name.substring(0, 2)}</p>\n                    </span>\n                )}\n            </div>\n        }\n    </StatsContext.Consumer>\n\nexport default Bobbleheads\n","import {Col, Row, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\"\nimport StatsContext from \"./StatsContext\"\nimport PerkElement from \"./PerkElement\"\nimport {useContext, useState} from \"react\";\nimport {PerksData, PerkTreeCategory} from \"./Perks\";\n\nconst PerksTower = () => {\n    const [category, setCategory] = useState<PerkTreeCategory>()\n    const {getRank} = useContext(StatsContext)\n    return (\n        <>\n            <h3>Perks</h3>\n            <Row style={{padding: 12}}>\n                <ToggleButtonGroup type={\"radio\"} name={\"special\"}>\n                    {\n                        PerksData\n                        .map(it =>\n                            <ToggleButton\n                                onClick={() => setCategory(it)}\n                                value={it.special}\n                                variant={category?.special === it.special ? \"primary\" : \"light\"}\n                            >\n                                {it.special.substring(0, 2)}\n                            </ToggleButton>\n                        )\n                    }\n                </ToggleButtonGroup>\n                {\n                    category &&\n                    <Col style={{padding: 12}}>\n                      <Row style={{fontWeight: 600, textAlign: \"center\"}}>\n                        <h3>{category.special}: {getRank(category.special)}</h3>\n                      </Row>\n                        {\n                            category.perks\n                            .map(perk =>\n                                <PerkElement\n                                    key={perk.name}\n                                    img={perk.img}\n                                    special={category.special}\n                                    perk={perk}\n                                />\n                            )\n                        }\n                    </Col>\n                }\n            </Row>\n        </>\n    )\n}\n\nexport default PerksTower\n","import {useContext} from \"react\";\nimport BuildContext from \"./BuildContext\";\n\nconst BuildInfo = () => {\n    const {name} = useContext(BuildContext)\n    return (\n        <h1 style={{marginBottom: 20}}>\n            {\n                name\n                // || <span style={{color: \"grey\", fontStyle: \"italic\"}}>Choose a build name</span>\n            }\n        </h1>\n    )\n}\n\nexport default BuildInfo\n","import \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport {PropsWithChildren, useContext, useEffect, useMemo} from \"react\"\nimport {Col, Container, Row} from \"react-bootstrap\"\n\nimport LZUTF8 from \"lzutf8\";\n\nimport BuildContext, {useBuild} from \"./BuildContext\";\nimport StatsContext, {useStats} from \"./StatsContext\"\nimport PerksContext, {Perk, usePerks} from \"./PerksContext\"\nimport StartingStats from \"./StartingStats\"\nimport Header from \"./Header\"\nimport PerksGrid from \"./PerksGrid\"\nimport PerksDetail from \"./PerksDetail\"\nimport Bobbleheads from \"./Bobbleheads\";\nimport {useMatchMedia} from \"./MatchMedia\";\nimport Buttons from \"./Buttons\";\nimport PerksTower from \"./PerksTower\";\nimport BuildInfo from \"./BuildInfo\";\n\nconst usePreserveState = () => {\n    const {SPECIAL, getLevel, getBobbleHeads} = useContext(StatsContext)\n    const {perks} = useContext(PerksContext)\n    const {name} = useContext(BuildContext)\n    useEffect(() => {\n        const state = {\n            name,\n            SPECIAL,\n            level: getLevel(),\n            bobbleheads: getBobbleHeads(),\n            perksAdded: perks.map(it => {\n                const {name, rank} = it\n                return {name, rank} as Perk\n            }).reduce((arr, perk) => {\n                const existing = arr.findIndex(it => it.name === perk.name)\n                if (existing >= 0) arr.splice(existing, 1)\n                arr.push(perk)\n                return arr\n            }, [] as Perk[])\n        }\n        window.history.replaceState(null, document.title, `#${LZUTF8.compress(JSON.stringify(state), {outputEncoding: \"Base64\"})}`)\n    }, [name, SPECIAL, perks, getLevel, getBobbleHeads])\n}\n\nconst AppStateListener = ({children}: PropsWithChildren<any>) => {\n    usePreserveState()\n    return (<>{children}</>)\n}\n\nconst AppContextProvider = ({children}: PropsWithChildren<any>) => {\n    const {\n        name,\n        SPECIAL,\n        level,\n        perksAdded,\n        bobbleheads,\n    } = JSON.parse(LZUTF8.decompress(window.location.hash.substring(1, window.location.hash.length), {inputEncoding: \"Base64\"}) || \"{}\")\n    const stats = useStats({SPECIAL, level, bobbleheads})\n    const perks = usePerks({level: stats.getLevel(), perksAdded})\n    const build = useBuild({name})\n    return (\n        <StatsContext.Provider value={useMemo(() => stats, [stats])}>\n            <PerksContext.Provider value={useMemo(() => perks, [perks])}>\n                <BuildContext.Provider value={useMemo(() => build, [build])}>\n                    <AppStateListener>\n                        {children}\n                    </AppStateListener>\n                </BuildContext.Provider>\n            </PerksContext.Provider>\n        </StatsContext.Provider>\n    )\n}\n\nconst App = () => {\n    const {eq, gt} = useMatchMedia()\n    return (\n        <AppContextProvider>\n            <Container fluid>\n                <Header/>\n                {eq(\"xs\") && <div style={{marginBottom: 20}}><Buttons/></div>}\n                <Row>\n                    <Col xl={3}>\n                        <BuildInfo/>\n                        <StartingStats/>\n                        <Bobbleheads/>\n                        <PerksDetail/>\n                    </Col>\n                    <Col xl={9}>\n                        {\n                            gt(\"xs\") ?\n                                <PerksGrid/>\n                                :\n                                <PerksTower/>\n                        }\n                    </Col>\n                </Row>\n            </Container>\n        </AppContextProvider>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}